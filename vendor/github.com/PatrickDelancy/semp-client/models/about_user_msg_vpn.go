// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AboutUserMsgVpn about user msg vpn
//
// swagger:model AboutUserMsgVpn
type AboutUserMsgVpn struct {

	// The Message VPN access level of the User. The allowed values and their meaning are:
	//
	// <pre>
	// "none" - No access.
	// "read-only" - Read only access.
	// "read-write" - Read and write access.
	// </pre>
	//
	// Enum: [none read-only read-write]
	AccessLevel string `json:"accessLevel,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`
}

// Validate validates this about user msg vpn
func (m *AboutUserMsgVpn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var aboutUserMsgVpnTypeAccessLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","read-only","read-write"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aboutUserMsgVpnTypeAccessLevelPropEnum = append(aboutUserMsgVpnTypeAccessLevelPropEnum, v)
	}
}

const (

	// AboutUserMsgVpnAccessLevelNone captures enum value "none"
	AboutUserMsgVpnAccessLevelNone string = "none"

	// AboutUserMsgVpnAccessLevelReadDashOnly captures enum value "read-only"
	AboutUserMsgVpnAccessLevelReadDashOnly string = "read-only"

	// AboutUserMsgVpnAccessLevelReadDashWrite captures enum value "read-write"
	AboutUserMsgVpnAccessLevelReadDashWrite string = "read-write"
)

// prop value enum
func (m *AboutUserMsgVpn) validateAccessLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, aboutUserMsgVpnTypeAccessLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AboutUserMsgVpn) validateAccessLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessLevelEnum("accessLevel", "body", m.AccessLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this about user msg vpn based on context it is used
func (m *AboutUserMsgVpn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AboutUserMsgVpn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AboutUserMsgVpn) UnmarshalBinary(b []byte) error {
	var res AboutUserMsgVpn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
