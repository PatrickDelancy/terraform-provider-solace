// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnAuthenticationOauthProvider msg vpn authentication oauth provider
//
// swagger:model MsgVpnAuthenticationOauthProvider
type MsgVpnAuthenticationOauthProvider struct {

	// The audience claim name, indicating which part of the object to use for determining the audience. The default value is `"aud"`.
	AudienceClaimName string `json:"audienceClaimName,omitempty"`

	// The audience claim source, indicating where to search for the audience value. The default value is `"id-token"`. The allowed values and their meaning are:
	//
	// <pre>
	// "access-token" - The OAuth v2 access_token.
	// "id-token" - The OpenID Connect id_token.
	// "introspection" - The result of introspecting the OAuth v2 access_token.
	// </pre>
	//
	// Enum: [access-token id-token introspection]
	AudienceClaimSource string `json:"audienceClaimSource,omitempty"`

	// The required audience value for a token to be considered valid. The default value is `""`.
	AudienceClaimValue string `json:"audienceClaimValue,omitempty"`

	// Enable or disable audience validation. The default value is `false`.
	AudienceValidationEnabled bool `json:"audienceValidationEnabled,omitempty"`

	// The authorization group claim name, indicating which part of the object to use for determining the authorization group. The default value is `"scope"`.
	AuthorizationGroupClaimName string `json:"authorizationGroupClaimName,omitempty"`

	// The authorization group claim source, indicating where to search for the authorization group name. The default value is `"id-token"`. The allowed values and their meaning are:
	//
	// <pre>
	// "access-token" - The OAuth v2 access_token.
	// "id-token" - The OpenID Connect id_token.
	// "introspection" - The result of introspecting the OAuth v2 access_token.
	// </pre>
	//
	// Enum: [access-token id-token introspection]
	AuthorizationGroupClaimSource string `json:"authorizationGroupClaimSource,omitempty"`

	// Enable or disable OAuth based authorization. When enabled, the configured authorization type for OAuth clients is overridden. The default value is `false`.
	AuthorizationGroupEnabled bool `json:"authorizationGroupEnabled,omitempty"`

	// Enable or disable the disconnection of clients when their tokens expire. Changing this value does not affect existing clients, only new client connections. The default value is `true`.
	DisconnectOnTokenExpirationEnabled bool `json:"disconnectOnTokenExpirationEnabled,omitempty"`

	// Enable or disable OAuth Provider client authentication. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// The number of seconds between forced JWKS public key refreshing. The default value is `86400`.
	JwksRefreshInterval int32 `json:"jwksRefreshInterval,omitempty"`

	// The URI where the OAuth provider publishes its JWKS public keys. The default value is `""`.
	JwksURI string `json:"jwksUri,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The name of the OAuth Provider.
	OauthProviderName string `json:"oauthProviderName,omitempty"`

	// Enable or disable whether to ignore time limits and accept tokens that are not yet valid or are no longer valid. The default value is `false`.
	TokenIgnoreTimeLimitsEnabled bool `json:"tokenIgnoreTimeLimitsEnabled,omitempty"`

	// The parameter name used to identify the token during access token introspection. A standards compliant OAuth introspection server expects "token". The default value is `"token"`.
	TokenIntrospectionParameterName string `json:"tokenIntrospectionParameterName,omitempty"`

	// The password to use when logging into the token introspection URI. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. The default value is `""`.
	TokenIntrospectionPassword string `json:"tokenIntrospectionPassword,omitempty"`

	// The maximum time in seconds a token introspection is allowed to take. The default value is `1`.
	TokenIntrospectionTimeout int32 `json:"tokenIntrospectionTimeout,omitempty"`

	// The token introspection URI of the OAuth authentication server. The default value is `""`.
	TokenIntrospectionURI string `json:"tokenIntrospectionUri,omitempty"`

	// The username to use when logging into the token introspection URI. The default value is `""`.
	TokenIntrospectionUsername string `json:"tokenIntrospectionUsername,omitempty"`

	// The username claim name, indicating which part of the object to use for determining the username. The default value is `"sub"`.
	UsernameClaimName string `json:"usernameClaimName,omitempty"`

	// The username claim source, indicating where to search for the username value. The default value is `"id-token"`. The allowed values and their meaning are:
	//
	// <pre>
	// "access-token" - The OAuth v2 access_token.
	// "id-token" - The OpenID Connect id_token.
	// "introspection" - The result of introspecting the OAuth v2 access_token.
	// </pre>
	//
	// Enum: [access-token id-token introspection]
	UsernameClaimSource string `json:"usernameClaimSource,omitempty"`

	// Enable or disable whether the API provided username will be validated against the username calculated from the token(s); the connection attempt is rejected if they differ. The default value is `false`.
	UsernameValidateEnabled bool `json:"usernameValidateEnabled,omitempty"`
}

// Validate validates this msg vpn authentication oauth provider
func (m *MsgVpnAuthenticationOauthProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudienceClaimSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationGroupClaimSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsernameClaimSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnAuthenticationOauthProviderTypeAudienceClaimSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["access-token","id-token","introspection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnAuthenticationOauthProviderTypeAudienceClaimSourcePropEnum = append(msgVpnAuthenticationOauthProviderTypeAudienceClaimSourcePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationOauthProviderAudienceClaimSourceAccessDashToken captures enum value "access-token"
	MsgVpnAuthenticationOauthProviderAudienceClaimSourceAccessDashToken string = "access-token"

	// MsgVpnAuthenticationOauthProviderAudienceClaimSourceIDDashToken captures enum value "id-token"
	MsgVpnAuthenticationOauthProviderAudienceClaimSourceIDDashToken string = "id-token"

	// MsgVpnAuthenticationOauthProviderAudienceClaimSourceIntrospection captures enum value "introspection"
	MsgVpnAuthenticationOauthProviderAudienceClaimSourceIntrospection string = "introspection"
)

// prop value enum
func (m *MsgVpnAuthenticationOauthProvider) validateAudienceClaimSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnAuthenticationOauthProviderTypeAudienceClaimSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnAuthenticationOauthProvider) validateAudienceClaimSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AudienceClaimSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateAudienceClaimSourceEnum("audienceClaimSource", "body", m.AudienceClaimSource); err != nil {
		return err
	}

	return nil
}

var msgVpnAuthenticationOauthProviderTypeAuthorizationGroupClaimSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["access-token","id-token","introspection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnAuthenticationOauthProviderTypeAuthorizationGroupClaimSourcePropEnum = append(msgVpnAuthenticationOauthProviderTypeAuthorizationGroupClaimSourcePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationOauthProviderAuthorizationGroupClaimSourceAccessDashToken captures enum value "access-token"
	MsgVpnAuthenticationOauthProviderAuthorizationGroupClaimSourceAccessDashToken string = "access-token"

	// MsgVpnAuthenticationOauthProviderAuthorizationGroupClaimSourceIDDashToken captures enum value "id-token"
	MsgVpnAuthenticationOauthProviderAuthorizationGroupClaimSourceIDDashToken string = "id-token"

	// MsgVpnAuthenticationOauthProviderAuthorizationGroupClaimSourceIntrospection captures enum value "introspection"
	MsgVpnAuthenticationOauthProviderAuthorizationGroupClaimSourceIntrospection string = "introspection"
)

// prop value enum
func (m *MsgVpnAuthenticationOauthProvider) validateAuthorizationGroupClaimSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnAuthenticationOauthProviderTypeAuthorizationGroupClaimSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnAuthenticationOauthProvider) validateAuthorizationGroupClaimSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationGroupClaimSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationGroupClaimSourceEnum("authorizationGroupClaimSource", "body", m.AuthorizationGroupClaimSource); err != nil {
		return err
	}

	return nil
}

var msgVpnAuthenticationOauthProviderTypeUsernameClaimSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["access-token","id-token","introspection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnAuthenticationOauthProviderTypeUsernameClaimSourcePropEnum = append(msgVpnAuthenticationOauthProviderTypeUsernameClaimSourcePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationOauthProviderUsernameClaimSourceAccessDashToken captures enum value "access-token"
	MsgVpnAuthenticationOauthProviderUsernameClaimSourceAccessDashToken string = "access-token"

	// MsgVpnAuthenticationOauthProviderUsernameClaimSourceIDDashToken captures enum value "id-token"
	MsgVpnAuthenticationOauthProviderUsernameClaimSourceIDDashToken string = "id-token"

	// MsgVpnAuthenticationOauthProviderUsernameClaimSourceIntrospection captures enum value "introspection"
	MsgVpnAuthenticationOauthProviderUsernameClaimSourceIntrospection string = "introspection"
)

// prop value enum
func (m *MsgVpnAuthenticationOauthProvider) validateUsernameClaimSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnAuthenticationOauthProviderTypeUsernameClaimSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnAuthenticationOauthProvider) validateUsernameClaimSource(formats strfmt.Registry) error {
	if swag.IsZero(m.UsernameClaimSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateUsernameClaimSourceEnum("usernameClaimSource", "body", m.UsernameClaimSource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this msg vpn authentication oauth provider based on context it is used
func (m *MsgVpnAuthenticationOauthProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnAuthenticationOauthProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnAuthenticationOauthProvider) UnmarshalBinary(b []byte) error {
	var res MsgVpnAuthenticationOauthProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
