// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpn msg vpn
//
// swagger:model MsgVpn
type MsgVpn struct {

	// The name of another Message VPN which this Message VPN is an alias for. When this Message VPN is enabled, the alias has no effect. When this Message VPN is disabled, Clients (but not Bridges and routing Links) logging into this Message VPN are automatically logged in to the other Message VPN, and authentication and authorization take place in the context of the other Message VPN.
	//
	// Aliases may form a non-circular chain, cascading one to the next. The default value is `""`. Available since 2.14.
	Alias string `json:"alias,omitempty"`

	// Enable or disable basic authentication for clients connecting to the Message VPN. Basic authentication is authentication that involves the use of a username and password to prove identity. If a user provides credentials for a different authentication scheme, this setting is not applicable. The default value is `true`.
	AuthenticationBasicEnabled bool `json:"authenticationBasicEnabled,omitempty"`

	// The name of the RADIUS or LDAP Profile to use for basic authentication. The default value is `"default"`.
	AuthenticationBasicProfileName string `json:"authenticationBasicProfileName,omitempty"`

	// The RADIUS domain to use for basic authentication. The default value is `""`.
	AuthenticationBasicRadiusDomain string `json:"authenticationBasicRadiusDomain,omitempty"`

	// The type of basic authentication to use for clients connecting to the Message VPN. The default value is `"radius"`. The allowed values and their meaning are:
	//
	// <pre>
	// "internal" - Internal database. Authentication is against Client Usernames.
	// "ldap" - LDAP authentication. An LDAP profile name must be provided.
	// "radius" - RADIUS authentication. A RADIUS profile name must be provided.
	// "none" - No authentication. Anonymous login allowed.
	// </pre>
	//
	// Enum: [internal ldap radius none]
	AuthenticationBasicType string `json:"authenticationBasicType,omitempty"`

	// Enable or disable allowing a client to specify a Client Username via the API connect method. When disabled, the certificate CN (Common Name) is always used. The default value is `false`.
	AuthenticationClientCertAllowAPIProvidedUsernameEnabled bool `json:"authenticationClientCertAllowApiProvidedUsernameEnabled,omitempty"`

	// Enable or disable client certificate authentication in the Message VPN. The default value is `false`.
	AuthenticationClientCertEnabled bool `json:"authenticationClientCertEnabled,omitempty"`

	// The maximum depth for a client certificate chain. The depth of a chain is defined as the number of signing CA certificates that are present in the chain back to a trusted self-signed root CA certificate. The default value is `3`.
	AuthenticationClientCertMaxChainDepth int64 `json:"authenticationClientCertMaxChainDepth,omitempty"`

	// The desired behavior for client certificate revocation checking. The default value is `"allow-valid"`. The allowed values and their meaning are:
	//
	// <pre>
	// "allow-all" - Allow the client to authenticate, the result of client certificate revocation check is ignored.
	// "allow-unknown" - Allow the client to authenticate even if the revocation status of his certificate cannot be determined.
	// "allow-valid" - Allow the client to authenticate only when the revocation check returned an explicit positive response.
	// </pre>
	//  Available since 2.6.
	// Enum: [allow-all allow-unknown allow-valid]
	AuthenticationClientCertRevocationCheckMode string `json:"authenticationClientCertRevocationCheckMode,omitempty"`

	// The field from the client certificate to use as the client username. The default value is `"common-name"`. The allowed values and their meaning are:
	//
	// <pre>
	// "certificate-thumbprint" - The username is computed as the SHA-1 hash over the entire DER-encoded contents of the client certificate.
	// "common-name" - The username is extracted from the certificate's first instance of the Common Name attribute in the Subject DN.
	// "common-name-last" - The username is extracted from the certificate's last instance of the Common Name attribute in the Subject DN.
	// "subject-alternate-name-msupn" - The username is extracted from the certificate's Other Name type of the Subject Alternative Name and must have the msUPN signature.
	// "uid" - The username is extracted from the certificate's first instance of the User Identifier attribute in the Subject DN.
	// "uid-last" - The username is extracted from the certificate's last instance of the User Identifier attribute in the Subject DN.
	// </pre>
	//  Available since 2.6.
	// Enum: [certificate-thumbprint common-name common-name-last subject-alternate-name-msupn uid uid-last]
	AuthenticationClientCertUsernameSource string `json:"authenticationClientCertUsernameSource,omitempty"`

	// Enable or disable validation of the "Not Before" and "Not After" validity dates in the client certificate. The default value is `true`.
	AuthenticationClientCertValidateDateEnabled bool `json:"authenticationClientCertValidateDateEnabled,omitempty"`

	// Enable or disable allowing a client to specify a Client Username via the API connect method. When disabled, the Kerberos Principal name is always used. The default value is `false`.
	AuthenticationKerberosAllowAPIProvidedUsernameEnabled bool `json:"authenticationKerberosAllowApiProvidedUsernameEnabled,omitempty"`

	// Enable or disable Kerberos authentication in the Message VPN. The default value is `false`.
	AuthenticationKerberosEnabled bool `json:"authenticationKerberosEnabled,omitempty"`

	// The name of the provider to use when the client does not supply a provider name. The default value is `""`. Available since 2.13.
	AuthenticationOauthDefaultProviderName string `json:"authenticationOauthDefaultProviderName,omitempty"`

	// Enable or disable OAuth authentication. The default value is `false`. Available since 2.13.
	AuthenticationOauthEnabled bool `json:"authenticationOauthEnabled,omitempty"`

	// The name of the attribute that is retrieved from the LDAP server as part of the LDAP search when authorizing a client connecting to the Message VPN. The default value is `"memberOf"`.
	AuthorizationLdapGroupMembershipAttributeName string `json:"authorizationLdapGroupMembershipAttributeName,omitempty"`

	// Enable or disable client-username domain trimming for LDAP lookups of client connections. When enabled, the value of $CLIENT_USERNAME (when used for searching) will be truncated at the first occurance of the @ character. For example, if the client-username is in the form of an email address, then the domain portion will be removed. The default value is `false`. Available since 2.13.
	AuthorizationLdapTrimClientUsernameDomainEnabled bool `json:"authorizationLdapTrimClientUsernameDomainEnabled,omitempty"`

	// The name of the LDAP Profile to use for client authorization. The default value is `""`.
	AuthorizationProfileName string `json:"authorizationProfileName,omitempty"`

	// The type of authorization to use for clients connecting to the Message VPN. The default value is `"internal"`. The allowed values and their meaning are:
	//
	// <pre>
	// "ldap" - LDAP authorization.
	// "internal" - Internal authorization.
	// </pre>
	//
	// Enum: [ldap internal]
	AuthorizationType string `json:"authorizationType,omitempty"`

	// Enable or disable validation of the Common Name (CN) in the server certificate from the remote broker. If enabled, the Common Name is checked against the list of Trusted Common Names configured for the Bridge. Common Name validation is not performed if Server Certificate Name Validation is enabled, even if Common Name validation is enabled. The default value is `true`. Deprecated since 2.18. Common Name validation has been replaced by Server Certificate Name validation.
	BridgingTLSServerCertEnforceTrustedCommonNameEnabled bool `json:"bridgingTlsServerCertEnforceTrustedCommonNameEnabled,omitempty"`

	// The maximum depth for a server certificate chain. The depth of a chain is defined as the number of signing CA certificates that are present in the chain back to a trusted self-signed root CA certificate. The default value is `3`.
	BridgingTLSServerCertMaxChainDepth int64 `json:"bridgingTlsServerCertMaxChainDepth,omitempty"`

	// Enable or disable validation of the "Not Before" and "Not After" validity dates in the server certificate. When disabled, a certificate will be accepted even if the certificate is not valid based on these dates. The default value is `true`.
	BridgingTLSServerCertValidateDateEnabled bool `json:"bridgingTlsServerCertValidateDateEnabled,omitempty"`

	// Enable or disable the standard TLS authentication mechanism of verifying the name used to connect to the bridge. If enabled, the name used to connect to the bridge is checked against the names specified in the certificate returned by the remote router. Legacy Common Name validation is not performed if Server Certificate Name Validation is enabled, even if Common Name validation is also enabled. The default value is `true`. Available since 2.18.
	BridgingTLSServerCertValidateNameEnabled bool `json:"bridgingTlsServerCertValidateNameEnabled,omitempty"`

	// Enable or disable managing of cache instances over the message bus. The default value is `true`.
	DistributedCacheManagementEnabled bool `json:"distributedCacheManagementEnabled,omitempty"`

	// Enable or disable Dynamic Message Routing (DMR) for the Message VPN. The default value is `false`. Available since 2.11.
	DmrEnabled bool `json:"dmrEnabled,omitempty"`

	// Enable or disable the Message VPN. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// event connection count threshold
	EventConnectionCountThreshold *EventThreshold `json:"eventConnectionCountThreshold,omitempty"`

	// event egress flow count threshold
	EventEgressFlowCountThreshold *EventThreshold `json:"eventEgressFlowCountThreshold,omitempty"`

	// event egress msg rate threshold
	EventEgressMsgRateThreshold *EventThresholdByValue `json:"eventEgressMsgRateThreshold,omitempty"`

	// event endpoint count threshold
	EventEndpointCountThreshold *EventThreshold `json:"eventEndpointCountThreshold,omitempty"`

	// event ingress flow count threshold
	EventIngressFlowCountThreshold *EventThreshold `json:"eventIngressFlowCountThreshold,omitempty"`

	// event ingress msg rate threshold
	EventIngressMsgRateThreshold *EventThresholdByValue `json:"eventIngressMsgRateThreshold,omitempty"`

	// The threshold, in kilobytes, after which a message is considered to be large for the Message VPN. The default value is `1024`.
	EventLargeMsgThreshold int64 `json:"eventLargeMsgThreshold,omitempty"`

	// A prefix applied to all published Events in the Message VPN. The default value is `""`.
	EventLogTag string `json:"eventLogTag,omitempty"`

	// event msg spool usage threshold
	EventMsgSpoolUsageThreshold *EventThreshold `json:"eventMsgSpoolUsageThreshold,omitempty"`

	// Enable or disable Client level Event message publishing. The default value is `false`.
	EventPublishClientEnabled bool `json:"eventPublishClientEnabled,omitempty"`

	// Enable or disable Message VPN level Event message publishing. The default value is `false`.
	EventPublishMsgVpnEnabled bool `json:"eventPublishMsgVpnEnabled,omitempty"`

	// Subscription level Event message publishing mode. The default value is `"off"`. The allowed values and their meaning are:
	//
	// <pre>
	// "off" - Disable client level event message publishing.
	// "on-with-format-v1" - Enable client level event message publishing with format v1.
	// "on-with-no-unsubscribe-events-on-disconnect-format-v1" - As "on-with-format-v1", but unsubscribe events are not generated when a client disconnects. Unsubscribe events are still raised when a client explicitly unsubscribes from its subscriptions.
	// "on-with-format-v2" - Enable client level event message publishing with format v2.
	// "on-with-no-unsubscribe-events-on-disconnect-format-v2" - As "on-with-format-v2", but unsubscribe events are not generated when a client disconnects. Unsubscribe events are still raised when a client explicitly unsubscribes from its subscriptions.
	// </pre>
	//
	// Enum: [off on-with-format-v1 on-with-no-unsubscribe-events-on-disconnect-format-v1 on-with-format-v2 on-with-no-unsubscribe-events-on-disconnect-format-v2]
	EventPublishSubscriptionMode string `json:"eventPublishSubscriptionMode,omitempty"`

	// Enable or disable Event publish topics in MQTT format. The default value is `false`.
	EventPublishTopicFormatMqttEnabled bool `json:"eventPublishTopicFormatMqttEnabled,omitempty"`

	// Enable or disable Event publish topics in SMF format. The default value is `true`.
	EventPublishTopicFormatSmfEnabled bool `json:"eventPublishTopicFormatSmfEnabled,omitempty"`

	// event service amqp connection count threshold
	EventServiceAmqpConnectionCountThreshold *EventThreshold `json:"eventServiceAmqpConnectionCountThreshold,omitempty"`

	// event service mqtt connection count threshold
	EventServiceMqttConnectionCountThreshold *EventThreshold `json:"eventServiceMqttConnectionCountThreshold,omitempty"`

	// event service rest incoming connection count threshold
	EventServiceRestIncomingConnectionCountThreshold *EventThreshold `json:"eventServiceRestIncomingConnectionCountThreshold,omitempty"`

	// event service smf connection count threshold
	EventServiceSmfConnectionCountThreshold *EventThreshold `json:"eventServiceSmfConnectionCountThreshold,omitempty"`

	// event service web connection count threshold
	EventServiceWebConnectionCountThreshold *EventThreshold `json:"eventServiceWebConnectionCountThreshold,omitempty"`

	// event subscription count threshold
	EventSubscriptionCountThreshold *EventThreshold `json:"eventSubscriptionCountThreshold,omitempty"`

	// event transacted session count threshold
	EventTransactedSessionCountThreshold *EventThreshold `json:"eventTransactedSessionCountThreshold,omitempty"`

	// event transaction count threshold
	EventTransactionCountThreshold *EventThreshold `json:"eventTransactionCountThreshold,omitempty"`

	// Enable or disable the export of subscriptions in the Message VPN to other routers in the network over Neighbor links. The default value is `false`.
	ExportSubscriptionsEnabled bool `json:"exportSubscriptionsEnabled,omitempty"`

	// Enable or disable JNDI access for clients in the Message VPN. The default value is `false`. Available since 2.2.
	JndiEnabled bool `json:"jndiEnabled,omitempty"`

	// The maximum number of client connections to the Message VPN. The default is the maximum value supported by the platform.
	MaxConnectionCount int64 `json:"maxConnectionCount,omitempty"`

	// The maximum number of transmit flows that can be created in the Message VPN. The default value is `1000`.
	MaxEgressFlowCount int64 `json:"maxEgressFlowCount,omitempty"`

	// The maximum number of Queues and Topic Endpoints that can be created in the Message VPN. The default value is `1000`.
	MaxEndpointCount int64 `json:"maxEndpointCount,omitempty"`

	// The maximum number of receive flows that can be created in the Message VPN. The default value is `1000`.
	MaxIngressFlowCount int64 `json:"maxIngressFlowCount,omitempty"`

	// The maximum message spool usage by the Message VPN, in megabytes. The default value is `0`.
	MaxMsgSpoolUsage int64 `json:"maxMsgSpoolUsage,omitempty"`

	// The maximum number of local client subscriptions that can be added to the Message VPN. This limit is not enforced when a subscription is added using a management interface, such as CLI or SEMP. The default varies by platform.
	MaxSubscriptionCount int64 `json:"maxSubscriptionCount,omitempty"`

	// The maximum number of transacted sessions that can be created in the Message VPN. The default varies by platform.
	MaxTransactedSessionCount int64 `json:"maxTransactedSessionCount,omitempty"`

	// The maximum number of transactions that can be created in the Message VPN. The default varies by platform.
	MaxTransactionCount int64 `json:"maxTransactionCount,omitempty"`

	// The maximum total memory usage of the MQTT Retain feature for this Message VPN, in MB. If the maximum memory is reached, any arriving retain messages that require more memory are discarded. A value of -1 indicates that the memory is bounded only by the global max memory limit. A value of 0 prevents MQTT Retain from becoming operational. The default value is `-1`. Available since 2.11.
	MqttRetainMaxMemory int32 `json:"mqttRetainMaxMemory,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The acknowledgement (ACK) propagation interval for the replication Bridge, in number of replicated messages. The default value is `20`.
	ReplicationAckPropagationIntervalMsgCount int64 `json:"replicationAckPropagationIntervalMsgCount,omitempty"`

	// The Client Username the replication Bridge uses to login to the remote Message VPN. The default value is `""`.
	ReplicationBridgeAuthenticationBasicClientUsername string `json:"replicationBridgeAuthenticationBasicClientUsername,omitempty"`

	// The password for the Client Username. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. The default value is `""`.
	ReplicationBridgeAuthenticationBasicPassword string `json:"replicationBridgeAuthenticationBasicPassword,omitempty"`

	// The PEM formatted content for the client certificate used by this bridge to login to the Remote Message VPN. It must consist of a private key and between one and three certificates comprising the certificate trust chain. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. Changing this attribute requires an HTTPS connection. The default value is `""`. Available since 2.9.
	ReplicationBridgeAuthenticationClientCertContent string `json:"replicationBridgeAuthenticationClientCertContent,omitempty"`

	// The password for the client certificate. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. Changing this attribute requires an HTTPS connection. The default value is `""`. Available since 2.9.
	ReplicationBridgeAuthenticationClientCertPassword string `json:"replicationBridgeAuthenticationClientCertPassword,omitempty"`

	// The authentication scheme for the replication Bridge in the Message VPN. The default value is `"basic"`. The allowed values and their meaning are:
	//
	// <pre>
	// "basic" - Basic Authentication Scheme (via username and password).
	// "client-certificate" - Client Certificate Authentication Scheme (via certificate file or content).
	// </pre>
	//
	// Enum: [basic client-certificate]
	ReplicationBridgeAuthenticationScheme string `json:"replicationBridgeAuthenticationScheme,omitempty"`

	// Enable or disable use of compression for the replication Bridge. The default value is `false`.
	ReplicationBridgeCompressedDataEnabled bool `json:"replicationBridgeCompressedDataEnabled,omitempty"`

	// The size of the window used for guaranteed messages published to the replication Bridge, in messages. The default value is `255`.
	ReplicationBridgeEgressFlowWindowSize int64 `json:"replicationBridgeEgressFlowWindowSize,omitempty"`

	// The number of seconds that must pass before retrying the replication Bridge connection. The default value is `3`.
	ReplicationBridgeRetryDelay int64 `json:"replicationBridgeRetryDelay,omitempty"`

	// Enable or disable use of encryption (TLS) for the replication Bridge connection. The default value is `false`.
	ReplicationBridgeTLSEnabled bool `json:"replicationBridgeTlsEnabled,omitempty"`

	// The Client Profile for the unidirectional replication Bridge in the Message VPN. It is used only for the TCP parameters. The default value is `"#client-profile"`.
	ReplicationBridgeUnidirectionalClientProfileName string `json:"replicationBridgeUnidirectionalClientProfileName,omitempty"`

	// Enable or disable replication for the Message VPN. The default value is `false`.
	ReplicationEnabled bool `json:"replicationEnabled,omitempty"`

	// The behavior to take when enabling replication for the Message VPN, depending on the existence of the replication Queue. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. The default value is `"fail-on-existing-queue"`. The allowed values and their meaning are:
	//
	// <pre>
	// "fail-on-existing-queue" - The data replication queue must not already exist.
	// "force-use-existing-queue" - The data replication queue must already exist. Any data messages on the Queue will be forwarded to interested applications. IMPORTANT: Before using this mode be certain that the messages are not stale or otherwise unsuitable to be forwarded. This mode can only be specified when the existing queue is configured the same as is currently specified under replication configuration otherwise the enabling of replication will fail.
	// "force-recreate-queue" - The data replication queue must already exist. Any data messages on the Queue will be discarded. IMPORTANT: Before using this mode be certain that the messages on the existing data replication queue are not needed by interested applications.
	// </pre>
	//
	// Enum: [fail-on-existing-queue force-use-existing-queue force-recreate-queue]
	ReplicationEnabledQueueBehavior string `json:"replicationEnabledQueueBehavior,omitempty"`

	// The maximum message spool usage by the replication Bridge local Queue (quota), in megabytes. The default value is `60000`.
	ReplicationQueueMaxMsgSpoolUsage int64 `json:"replicationQueueMaxMsgSpoolUsage,omitempty"`

	// Enable or disable whether messages discarded on the replication Bridge local Queue are rejected back to the sender. The default value is `true`.
	ReplicationQueueRejectMsgToSenderOnDiscardEnabled bool `json:"replicationQueueRejectMsgToSenderOnDiscardEnabled,omitempty"`

	// Enable or disable whether guaranteed messages published to synchronously replicated Topics are rejected back to the sender when synchronous replication becomes ineligible. The default value is `false`.
	ReplicationRejectMsgWhenSyncIneligibleEnabled bool `json:"replicationRejectMsgWhenSyncIneligibleEnabled,omitempty"`

	// The replication role for the Message VPN. The default value is `"standby"`. The allowed values and their meaning are:
	//
	// <pre>
	// "active" - Assume the Active role in replication for the Message VPN.
	// "standby" - Assume the Standby role in replication for the Message VPN.
	// </pre>
	//
	// Enum: [active standby]
	ReplicationRole string `json:"replicationRole,omitempty"`

	// The transaction replication mode for all transactions within the Message VPN. Changing this value during operation will not affect existing transactions; it is only used upon starting a transaction. The default value is `"async"`. The allowed values and their meaning are:
	//
	// <pre>
	// "sync" - Messages are acknowledged when replicated (spooled remotely).
	// "async" - Messages are acknowledged when pending replication (spooled locally).
	// </pre>
	//
	// Enum: [sync async]
	ReplicationTransactionMode string `json:"replicationTransactionMode,omitempty"`

	// Enable or disable validation of the Common Name (CN) in the server certificate from the remote REST Consumer. If enabled, the Common Name is checked against the list of Trusted Common Names configured for the REST Consumer. Common Name validation is not performed if Server Certificate Name Validation is enabled, even if Common Name validation is enabled. The default value is `true`. Deprecated since 2.17. Common Name validation has been replaced by Server Certificate Name validation.
	RestTLSServerCertEnforceTrustedCommonNameEnabled bool `json:"restTlsServerCertEnforceTrustedCommonNameEnabled,omitempty"`

	// The maximum depth for a REST Consumer server certificate chain. The depth of a chain is defined as the number of signing CA certificates that are present in the chain back to a trusted self-signed root CA certificate. The default value is `3`.
	RestTLSServerCertMaxChainDepth int64 `json:"restTlsServerCertMaxChainDepth,omitempty"`

	// Enable or disable validation of the "Not Before" and "Not After" validity dates in the REST Consumer server certificate. The default value is `true`.
	RestTLSServerCertValidateDateEnabled bool `json:"restTlsServerCertValidateDateEnabled,omitempty"`

	// Enable or disable the standard TLS authentication mechanism of verifying the name used to connect to the remote REST Consumer. If enabled, the name used to connect to the remote REST Consumer is checked against the names specified in the certificate returned by the remote router. Legacy Common Name validation is not performed if Server Certificate Name Validation is enabled, even if Common Name validation is also enabled. The default value is `true`. Available since 2.17.
	RestTLSServerCertValidateNameEnabled bool `json:"restTlsServerCertValidateNameEnabled,omitempty"`

	// Enable or disable "admin client" SEMP over the message bus commands for the current Message VPN. The default value is `false`.
	SempOverMsgBusAdminClientEnabled bool `json:"sempOverMsgBusAdminClientEnabled,omitempty"`

	// Enable or disable "admin distributed-cache" SEMP over the message bus commands for the current Message VPN. The default value is `false`.
	SempOverMsgBusAdminDistributedCacheEnabled bool `json:"sempOverMsgBusAdminDistributedCacheEnabled,omitempty"`

	// Enable or disable "admin" SEMP over the message bus commands for the current Message VPN. The default value is `false`.
	SempOverMsgBusAdminEnabled bool `json:"sempOverMsgBusAdminEnabled,omitempty"`

	// Enable or disable SEMP over the message bus for the current Message VPN. The default value is `true`.
	SempOverMsgBusEnabled bool `json:"sempOverMsgBusEnabled,omitempty"`

	// Enable or disable "show" SEMP over the message bus commands for the current Message VPN. The default value is `false`.
	SempOverMsgBusShowEnabled bool `json:"sempOverMsgBusShowEnabled,omitempty"`

	// The maximum number of AMQP client connections that can be simultaneously connected to the Message VPN. This value may be higher than supported by the platform. The default is the maximum value supported by the platform. Available since 2.7.
	ServiceAmqpMaxConnectionCount int64 `json:"serviceAmqpMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text AMQP service in the Message VPN. Disabling causes clients connected to the corresponding listen-port to be disconnected. The default value is `false`. Available since 2.7.
	ServiceAmqpPlainTextEnabled bool `json:"serviceAmqpPlainTextEnabled,omitempty"`

	// The port number for plain-text AMQP clients that connect to the Message VPN. The port must be unique across the message backbone. A value of 0 means that the listen-port is unassigned and cannot be enabled. The default value is `0`. Available since 2.7.
	ServiceAmqpPlainTextListenPort int64 `json:"serviceAmqpPlainTextListenPort,omitempty"`

	// Enable or disable the use of encryption (TLS) for the AMQP service in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `false`. Available since 2.7.
	ServiceAmqpTLSEnabled bool `json:"serviceAmqpTlsEnabled,omitempty"`

	// The port number for AMQP clients that connect to the Message VPN over TLS. The port must be unique across the message backbone. A value of 0 means that the listen-port is unassigned and cannot be enabled. The default value is `0`. Available since 2.7.
	ServiceAmqpTLSListenPort int64 `json:"serviceAmqpTlsListenPort,omitempty"`

	// Determines when to request a client certificate from an incoming MQTT client connecting via a TLS port. The default value is `"when-enabled-in-message-vpn"`. The allowed values and their meaning are:
	//
	// <pre>
	// "always" - Always ask for a client certificate regardless of the "message-vpn > authentication > client-certificate > shutdown" configuration.
	// "never" - Never ask for a client certificate regardless of the "message-vpn > authentication > client-certificate > shutdown" configuration.
	// "when-enabled-in-message-vpn" - Only ask for a client-certificate if client certificate authentication is enabled under "message-vpn >  authentication > client-certificate > shutdown".
	// </pre>
	//  Available since 2.21.
	// Enum: [always never when-enabled-in-message-vpn]
	ServiceMqttAuthenticationClientCertRequest string `json:"serviceMqttAuthenticationClientCertRequest,omitempty"`

	// The maximum number of MQTT client connections that can be simultaneously connected to the Message VPN. The default is the maximum value supported by the platform. Available since 2.1.
	ServiceMqttMaxConnectionCount int64 `json:"serviceMqttMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text MQTT service in the Message VPN. Disabling causes clients currently connected to be disconnected. The default value is `false`. Available since 2.1.
	ServiceMqttPlainTextEnabled bool `json:"serviceMqttPlainTextEnabled,omitempty"`

	// The port number for plain-text MQTT clients that connect to the Message VPN. The port must be unique across the message backbone. A value of 0 means that the listen-port is unassigned and cannot be enabled. The default value is `0`. Available since 2.1.
	ServiceMqttPlainTextListenPort int64 `json:"serviceMqttPlainTextListenPort,omitempty"`

	// Enable or disable the use of encryption (TLS) for the MQTT service in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `false`. Available since 2.1.
	ServiceMqttTLSEnabled bool `json:"serviceMqttTlsEnabled,omitempty"`

	// The port number for MQTT clients that connect to the Message VPN over TLS. The port must be unique across the message backbone. A value of 0 means that the listen-port is unassigned and cannot be enabled. The default value is `0`. Available since 2.1.
	ServiceMqttTLSListenPort int64 `json:"serviceMqttTlsListenPort,omitempty"`

	// Enable or disable the use of encrypted WebSocket (WebSocket over TLS) for the MQTT service in the Message VPN. Disabling causes clients currently connected by encrypted WebSocket to be disconnected. The default value is `false`. Available since 2.1.
	ServiceMqttTLSWebSocketEnabled bool `json:"serviceMqttTlsWebSocketEnabled,omitempty"`

	// The port number for MQTT clients that connect to the Message VPN using WebSocket over TLS. The port must be unique across the message backbone. A value of 0 means that the listen-port is unassigned and cannot be enabled. The default value is `0`. Available since 2.1.
	ServiceMqttTLSWebSocketListenPort int64 `json:"serviceMqttTlsWebSocketListenPort,omitempty"`

	// Enable or disable the use of WebSocket for the MQTT service in the Message VPN. Disabling causes clients currently connected by WebSocket to be disconnected. The default value is `false`. Available since 2.1.
	ServiceMqttWebSocketEnabled bool `json:"serviceMqttWebSocketEnabled,omitempty"`

	// The port number for plain-text MQTT clients that connect to the Message VPN using WebSocket. The port must be unique across the message backbone. A value of 0 means that the listen-port is unassigned and cannot be enabled. The default value is `0`. Available since 2.1.
	ServiceMqttWebSocketListenPort int64 `json:"serviceMqttWebSocketListenPort,omitempty"`

	// Determines when to request a client certificate from an incoming REST Producer connecting via a TLS port. The default value is `"when-enabled-in-message-vpn"`. The allowed values and their meaning are:
	//
	// <pre>
	// "always" - Always ask for a client certificate regardless of the "message-vpn > authentication > client-certificate > shutdown" configuration.
	// "never" - Never ask for a client certificate regardless of the "message-vpn > authentication > client-certificate > shutdown" configuration.
	// "when-enabled-in-message-vpn" - Only ask for a client-certificate if client certificate authentication is enabled under "message-vpn >  authentication > client-certificate > shutdown".
	// </pre>
	//  Available since 2.21.
	// Enum: [always never when-enabled-in-message-vpn]
	ServiceRestIncomingAuthenticationClientCertRequest string `json:"serviceRestIncomingAuthenticationClientCertRequest,omitempty"`

	// The handling of Authorization headers for incoming REST connections. The default value is `"drop"`. The allowed values and their meaning are:
	//
	// <pre>
	// "drop" - Do not attach the Authorization header to the message as a user property. This configuration is most secure.
	// "forward" - Forward the Authorization header, attaching it to the message as a user property in the same way as other headers. For best security, use the drop setting.
	// "legacy" - If the Authorization header was used for authentication to the broker, do not attach it to the message. If the Authorization header was not used for authentication to the broker, attach it to the message as a user property in the same way as other headers. For best security, use the drop setting.
	// </pre>
	//  Available since 2.19.
	// Enum: [drop forward legacy]
	ServiceRestIncomingAuthorizationHeaderHandling string `json:"serviceRestIncomingAuthorizationHeaderHandling,omitempty"`

	// The maximum number of REST incoming client connections that can be simultaneously connected to the Message VPN. This value may be higher than supported by the platform. The default is the maximum value supported by the platform.
	ServiceRestIncomingMaxConnectionCount int64 `json:"serviceRestIncomingMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text REST service for incoming clients in the Message VPN. Disabling causes clients currently connected to be disconnected. The default value is `false`.
	ServiceRestIncomingPlainTextEnabled bool `json:"serviceRestIncomingPlainTextEnabled,omitempty"`

	// The port number for incoming plain-text REST clients that connect to the Message VPN. The port must be unique across the message backbone. A value of 0 means that the listen-port is unassigned and cannot be enabled. The default value is `0`.
	ServiceRestIncomingPlainTextListenPort int64 `json:"serviceRestIncomingPlainTextListenPort,omitempty"`

	// Enable or disable the use of encryption (TLS) for the REST service for incoming clients in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `false`.
	ServiceRestIncomingTLSEnabled bool `json:"serviceRestIncomingTlsEnabled,omitempty"`

	// The port number for incoming REST clients that connect to the Message VPN over TLS. The port must be unique across the message backbone. A value of 0 means that the listen-port is unassigned and cannot be enabled. The default value is `0`.
	ServiceRestIncomingTLSListenPort int64 `json:"serviceRestIncomingTlsListenPort,omitempty"`

	// The REST service mode for incoming REST clients that connect to the Message VPN. The default value is `"messaging"`. The allowed values and their meaning are:
	//
	// <pre>
	// "gateway" - Act as a message gateway through which REST messages are propagated.
	// "messaging" - Act as a message broker on which REST messages are queued.
	// </pre>
	//  Available since 2.6.
	// Enum: [gateway messaging]
	ServiceRestMode string `json:"serviceRestMode,omitempty"`

	// The maximum number of REST Consumer (outgoing) client connections that can be simultaneously connected to the Message VPN. The default varies by platform.
	ServiceRestOutgoingMaxConnectionCount int64 `json:"serviceRestOutgoingMaxConnectionCount,omitempty"`

	// The maximum number of SMF client connections that can be simultaneously connected to the Message VPN. This value may be higher than supported by the platform. The default varies by platform.
	ServiceSmfMaxConnectionCount int64 `json:"serviceSmfMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text SMF service in the Message VPN. Disabling causes clients currently connected to be disconnected. The default value is `true`.
	ServiceSmfPlainTextEnabled bool `json:"serviceSmfPlainTextEnabled,omitempty"`

	// Enable or disable the use of encryption (TLS) for the SMF service in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `true`.
	ServiceSmfTLSEnabled bool `json:"serviceSmfTlsEnabled,omitempty"`

	// Determines when to request a client certificate from a Web Transport client connecting via a TLS port. The default value is `"when-enabled-in-message-vpn"`. The allowed values and their meaning are:
	//
	// <pre>
	// "always" - Always ask for a client certificate regardless of the "message-vpn > authentication > client-certificate > shutdown" configuration.
	// "never" - Never ask for a client certificate regardless of the "message-vpn > authentication > client-certificate > shutdown" configuration.
	// "when-enabled-in-message-vpn" - Only ask for a client-certificate if client certificate authentication is enabled under "message-vpn >  authentication > client-certificate > shutdown".
	// </pre>
	//  Available since 2.21.
	// Enum: [always never when-enabled-in-message-vpn]
	ServiceWebAuthenticationClientCertRequest string `json:"serviceWebAuthenticationClientCertRequest,omitempty"`

	// The maximum number of Web Transport client connections that can be simultaneously connected to the Message VPN. This value may be higher than supported by the platform. The default is the maximum value supported by the platform.
	ServiceWebMaxConnectionCount int64 `json:"serviceWebMaxConnectionCount,omitempty"`

	// Enable or disable the plain-text Web Transport service in the Message VPN. Disabling causes clients currently connected to be disconnected. The default value is `true`.
	ServiceWebPlainTextEnabled bool `json:"serviceWebPlainTextEnabled,omitempty"`

	// Enable or disable the use of TLS for the Web Transport service in the Message VPN. Disabling causes clients currently connected over TLS to be disconnected. The default value is `true`.
	ServiceWebTLSEnabled bool `json:"serviceWebTlsEnabled,omitempty"`

	// Enable or disable the allowing of TLS SMF clients to downgrade their connections to plain-text connections. Changing this will not affect existing connections. The default value is `false`.
	TLSAllowDowngradeToPlainTextEnabled bool `json:"tlsAllowDowngradeToPlainTextEnabled,omitempty"`
}

// Validate validates this msg vpn
func (m *MsgVpn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationBasicType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationClientCertRevocationCheckMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationClientCertUsernameSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthorizationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventEgressFlowCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventEgressMsgRateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventEndpointCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventIngressFlowCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventIngressMsgRateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventMsgSpoolUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventPublishSubscriptionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceAmqpConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceMqttConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceRestIncomingConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceSmfConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventServiceWebConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventSubscriptionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTransactedSessionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTransactionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationBridgeAuthenticationScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationEnabledQueueBehavior(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicationTransactionMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceMqttAuthenticationClientCertRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRestIncomingAuthenticationClientCertRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRestIncomingAuthorizationHeaderHandling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRestMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceWebAuthenticationClientCertRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnTypeAuthenticationBasicTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["internal","ldap","radius","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeAuthenticationBasicTypePropEnum = append(msgVpnTypeAuthenticationBasicTypePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationBasicTypeInternal captures enum value "internal"
	MsgVpnAuthenticationBasicTypeInternal string = "internal"

	// MsgVpnAuthenticationBasicTypeLdap captures enum value "ldap"
	MsgVpnAuthenticationBasicTypeLdap string = "ldap"

	// MsgVpnAuthenticationBasicTypeRadius captures enum value "radius"
	MsgVpnAuthenticationBasicTypeRadius string = "radius"

	// MsgVpnAuthenticationBasicTypeNone captures enum value "none"
	MsgVpnAuthenticationBasicTypeNone string = "none"
)

// prop value enum
func (m *MsgVpn) validateAuthenticationBasicTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeAuthenticationBasicTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateAuthenticationBasicType(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationBasicType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationBasicTypeEnum("authenticationBasicType", "body", m.AuthenticationBasicType); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeAuthenticationClientCertRevocationCheckModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow-all","allow-unknown","allow-valid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeAuthenticationClientCertRevocationCheckModePropEnum = append(msgVpnTypeAuthenticationClientCertRevocationCheckModePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationClientCertRevocationCheckModeAllowDashAll captures enum value "allow-all"
	MsgVpnAuthenticationClientCertRevocationCheckModeAllowDashAll string = "allow-all"

	// MsgVpnAuthenticationClientCertRevocationCheckModeAllowDashUnknown captures enum value "allow-unknown"
	MsgVpnAuthenticationClientCertRevocationCheckModeAllowDashUnknown string = "allow-unknown"

	// MsgVpnAuthenticationClientCertRevocationCheckModeAllowDashValid captures enum value "allow-valid"
	MsgVpnAuthenticationClientCertRevocationCheckModeAllowDashValid string = "allow-valid"
)

// prop value enum
func (m *MsgVpn) validateAuthenticationClientCertRevocationCheckModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeAuthenticationClientCertRevocationCheckModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateAuthenticationClientCertRevocationCheckMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationClientCertRevocationCheckMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationClientCertRevocationCheckModeEnum("authenticationClientCertRevocationCheckMode", "body", m.AuthenticationClientCertRevocationCheckMode); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeAuthenticationClientCertUsernameSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["certificate-thumbprint","common-name","common-name-last","subject-alternate-name-msupn","uid","uid-last"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeAuthenticationClientCertUsernameSourcePropEnum = append(msgVpnTypeAuthenticationClientCertUsernameSourcePropEnum, v)
	}
}

const (

	// MsgVpnAuthenticationClientCertUsernameSourceCertificateDashThumbprint captures enum value "certificate-thumbprint"
	MsgVpnAuthenticationClientCertUsernameSourceCertificateDashThumbprint string = "certificate-thumbprint"

	// MsgVpnAuthenticationClientCertUsernameSourceCommonDashName captures enum value "common-name"
	MsgVpnAuthenticationClientCertUsernameSourceCommonDashName string = "common-name"

	// MsgVpnAuthenticationClientCertUsernameSourceCommonDashNameDashLast captures enum value "common-name-last"
	MsgVpnAuthenticationClientCertUsernameSourceCommonDashNameDashLast string = "common-name-last"

	// MsgVpnAuthenticationClientCertUsernameSourceSubjectDashAlternateDashNameDashMsupn captures enum value "subject-alternate-name-msupn"
	MsgVpnAuthenticationClientCertUsernameSourceSubjectDashAlternateDashNameDashMsupn string = "subject-alternate-name-msupn"

	// MsgVpnAuthenticationClientCertUsernameSourceUID captures enum value "uid"
	MsgVpnAuthenticationClientCertUsernameSourceUID string = "uid"

	// MsgVpnAuthenticationClientCertUsernameSourceUIDDashLast captures enum value "uid-last"
	MsgVpnAuthenticationClientCertUsernameSourceUIDDashLast string = "uid-last"
)

// prop value enum
func (m *MsgVpn) validateAuthenticationClientCertUsernameSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeAuthenticationClientCertUsernameSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateAuthenticationClientCertUsernameSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationClientCertUsernameSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationClientCertUsernameSourceEnum("authenticationClientCertUsernameSource", "body", m.AuthenticationClientCertUsernameSource); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeAuthorizationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ldap","internal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeAuthorizationTypePropEnum = append(msgVpnTypeAuthorizationTypePropEnum, v)
	}
}

const (

	// MsgVpnAuthorizationTypeLdap captures enum value "ldap"
	MsgVpnAuthorizationTypeLdap string = "ldap"

	// MsgVpnAuthorizationTypeInternal captures enum value "internal"
	MsgVpnAuthorizationTypeInternal string = "internal"
)

// prop value enum
func (m *MsgVpn) validateAuthorizationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeAuthorizationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateAuthorizationType(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorizationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthorizationTypeEnum("authorizationType", "body", m.AuthorizationType); err != nil {
		return err
	}

	return nil
}

func (m *MsgVpn) validateEventConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventConnectionCountThreshold != nil {
		if err := m.EventConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventEgressFlowCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventEgressFlowCountThreshold) { // not required
		return nil
	}

	if m.EventEgressFlowCountThreshold != nil {
		if err := m.EventEgressFlowCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEgressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventEgressMsgRateThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventEgressMsgRateThreshold) { // not required
		return nil
	}

	if m.EventEgressMsgRateThreshold != nil {
		if err := m.EventEgressMsgRateThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEgressMsgRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventEndpointCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventEndpointCountThreshold) { // not required
		return nil
	}

	if m.EventEndpointCountThreshold != nil {
		if err := m.EventEndpointCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEndpointCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventIngressFlowCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventIngressFlowCountThreshold) { // not required
		return nil
	}

	if m.EventIngressFlowCountThreshold != nil {
		if err := m.EventIngressFlowCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventIngressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventIngressMsgRateThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventIngressMsgRateThreshold) { // not required
		return nil
	}

	if m.EventIngressMsgRateThreshold != nil {
		if err := m.EventIngressMsgRateThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventIngressMsgRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventMsgSpoolUsageThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventMsgSpoolUsageThreshold) { // not required
		return nil
	}

	if m.EventMsgSpoolUsageThreshold != nil {
		if err := m.EventMsgSpoolUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventMsgSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

var msgVpnTypeEventPublishSubscriptionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["off","on-with-format-v1","on-with-no-unsubscribe-events-on-disconnect-format-v1","on-with-format-v2","on-with-no-unsubscribe-events-on-disconnect-format-v2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeEventPublishSubscriptionModePropEnum = append(msgVpnTypeEventPublishSubscriptionModePropEnum, v)
	}
}

const (

	// MsgVpnEventPublishSubscriptionModeOff captures enum value "off"
	MsgVpnEventPublishSubscriptionModeOff string = "off"

	// MsgVpnEventPublishSubscriptionModeOnDashWithDashFormatDashV1 captures enum value "on-with-format-v1"
	MsgVpnEventPublishSubscriptionModeOnDashWithDashFormatDashV1 string = "on-with-format-v1"

	// MsgVpnEventPublishSubscriptionModeOnDashWithDashNoDashUnsubscribeDashEventsDashOnDashDisconnectDashFormatDashV1 captures enum value "on-with-no-unsubscribe-events-on-disconnect-format-v1"
	MsgVpnEventPublishSubscriptionModeOnDashWithDashNoDashUnsubscribeDashEventsDashOnDashDisconnectDashFormatDashV1 string = "on-with-no-unsubscribe-events-on-disconnect-format-v1"

	// MsgVpnEventPublishSubscriptionModeOnDashWithDashFormatDashV2 captures enum value "on-with-format-v2"
	MsgVpnEventPublishSubscriptionModeOnDashWithDashFormatDashV2 string = "on-with-format-v2"

	// MsgVpnEventPublishSubscriptionModeOnDashWithDashNoDashUnsubscribeDashEventsDashOnDashDisconnectDashFormatDashV2 captures enum value "on-with-no-unsubscribe-events-on-disconnect-format-v2"
	MsgVpnEventPublishSubscriptionModeOnDashWithDashNoDashUnsubscribeDashEventsDashOnDashDisconnectDashFormatDashV2 string = "on-with-no-unsubscribe-events-on-disconnect-format-v2"
)

// prop value enum
func (m *MsgVpn) validateEventPublishSubscriptionModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeEventPublishSubscriptionModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateEventPublishSubscriptionMode(formats strfmt.Registry) error {
	if swag.IsZero(m.EventPublishSubscriptionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventPublishSubscriptionModeEnum("eventPublishSubscriptionMode", "body", m.EventPublishSubscriptionMode); err != nil {
		return err
	}

	return nil
}

func (m *MsgVpn) validateEventServiceAmqpConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventServiceAmqpConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceAmqpConnectionCountThreshold != nil {
		if err := m.EventServiceAmqpConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceAmqpConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventServiceMqttConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventServiceMqttConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceMqttConnectionCountThreshold != nil {
		if err := m.EventServiceMqttConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceMqttConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventServiceRestIncomingConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventServiceRestIncomingConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceRestIncomingConnectionCountThreshold != nil {
		if err := m.EventServiceRestIncomingConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceRestIncomingConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventServiceSmfConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventServiceSmfConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceSmfConnectionCountThreshold != nil {
		if err := m.EventServiceSmfConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceSmfConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventServiceWebConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventServiceWebConnectionCountThreshold) { // not required
		return nil
	}

	if m.EventServiceWebConnectionCountThreshold != nil {
		if err := m.EventServiceWebConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceWebConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventSubscriptionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventSubscriptionCountThreshold) { // not required
		return nil
	}

	if m.EventSubscriptionCountThreshold != nil {
		if err := m.EventSubscriptionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventSubscriptionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventTransactedSessionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventTransactedSessionCountThreshold) { // not required
		return nil
	}

	if m.EventTransactedSessionCountThreshold != nil {
		if err := m.EventTransactedSessionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTransactedSessionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) validateEventTransactionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.EventTransactionCountThreshold) { // not required
		return nil
	}

	if m.EventTransactionCountThreshold != nil {
		if err := m.EventTransactionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTransactionCountThreshold")
			}
			return err
		}
	}

	return nil
}

var msgVpnTypeReplicationBridgeAuthenticationSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["basic","client-certificate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeReplicationBridgeAuthenticationSchemePropEnum = append(msgVpnTypeReplicationBridgeAuthenticationSchemePropEnum, v)
	}
}

const (

	// MsgVpnReplicationBridgeAuthenticationSchemeBasic captures enum value "basic"
	MsgVpnReplicationBridgeAuthenticationSchemeBasic string = "basic"

	// MsgVpnReplicationBridgeAuthenticationSchemeClientDashCertificate captures enum value "client-certificate"
	MsgVpnReplicationBridgeAuthenticationSchemeClientDashCertificate string = "client-certificate"
)

// prop value enum
func (m *MsgVpn) validateReplicationBridgeAuthenticationSchemeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeReplicationBridgeAuthenticationSchemePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateReplicationBridgeAuthenticationScheme(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationBridgeAuthenticationScheme) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationBridgeAuthenticationSchemeEnum("replicationBridgeAuthenticationScheme", "body", m.ReplicationBridgeAuthenticationScheme); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeReplicationEnabledQueueBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fail-on-existing-queue","force-use-existing-queue","force-recreate-queue"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeReplicationEnabledQueueBehaviorPropEnum = append(msgVpnTypeReplicationEnabledQueueBehaviorPropEnum, v)
	}
}

const (

	// MsgVpnReplicationEnabledQueueBehaviorFailDashOnDashExistingDashQueue captures enum value "fail-on-existing-queue"
	MsgVpnReplicationEnabledQueueBehaviorFailDashOnDashExistingDashQueue string = "fail-on-existing-queue"

	// MsgVpnReplicationEnabledQueueBehaviorForceDashUseDashExistingDashQueue captures enum value "force-use-existing-queue"
	MsgVpnReplicationEnabledQueueBehaviorForceDashUseDashExistingDashQueue string = "force-use-existing-queue"

	// MsgVpnReplicationEnabledQueueBehaviorForceDashRecreateDashQueue captures enum value "force-recreate-queue"
	MsgVpnReplicationEnabledQueueBehaviorForceDashRecreateDashQueue string = "force-recreate-queue"
)

// prop value enum
func (m *MsgVpn) validateReplicationEnabledQueueBehaviorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeReplicationEnabledQueueBehaviorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateReplicationEnabledQueueBehavior(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationEnabledQueueBehavior) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationEnabledQueueBehaviorEnum("replicationEnabledQueueBehavior", "body", m.ReplicationEnabledQueueBehavior); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeReplicationRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","standby"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeReplicationRolePropEnum = append(msgVpnTypeReplicationRolePropEnum, v)
	}
}

const (

	// MsgVpnReplicationRoleActive captures enum value "active"
	MsgVpnReplicationRoleActive string = "active"

	// MsgVpnReplicationRoleStandby captures enum value "standby"
	MsgVpnReplicationRoleStandby string = "standby"
)

// prop value enum
func (m *MsgVpn) validateReplicationRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeReplicationRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateReplicationRole(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationRole) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationRoleEnum("replicationRole", "body", m.ReplicationRole); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeReplicationTransactionModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sync","async"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeReplicationTransactionModePropEnum = append(msgVpnTypeReplicationTransactionModePropEnum, v)
	}
}

const (

	// MsgVpnReplicationTransactionModeSync captures enum value "sync"
	MsgVpnReplicationTransactionModeSync string = "sync"

	// MsgVpnReplicationTransactionModeAsync captures enum value "async"
	MsgVpnReplicationTransactionModeAsync string = "async"
)

// prop value enum
func (m *MsgVpn) validateReplicationTransactionModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeReplicationTransactionModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateReplicationTransactionMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicationTransactionMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicationTransactionModeEnum("replicationTransactionMode", "body", m.ReplicationTransactionMode); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeServiceMqttAuthenticationClientCertRequestPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","never","when-enabled-in-message-vpn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeServiceMqttAuthenticationClientCertRequestPropEnum = append(msgVpnTypeServiceMqttAuthenticationClientCertRequestPropEnum, v)
	}
}

const (

	// MsgVpnServiceMqttAuthenticationClientCertRequestAlways captures enum value "always"
	MsgVpnServiceMqttAuthenticationClientCertRequestAlways string = "always"

	// MsgVpnServiceMqttAuthenticationClientCertRequestNever captures enum value "never"
	MsgVpnServiceMqttAuthenticationClientCertRequestNever string = "never"

	// MsgVpnServiceMqttAuthenticationClientCertRequestWhenDashEnabledDashInDashMessageDashVpn captures enum value "when-enabled-in-message-vpn"
	MsgVpnServiceMqttAuthenticationClientCertRequestWhenDashEnabledDashInDashMessageDashVpn string = "when-enabled-in-message-vpn"
)

// prop value enum
func (m *MsgVpn) validateServiceMqttAuthenticationClientCertRequestEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeServiceMqttAuthenticationClientCertRequestPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateServiceMqttAuthenticationClientCertRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceMqttAuthenticationClientCertRequest) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceMqttAuthenticationClientCertRequestEnum("serviceMqttAuthenticationClientCertRequest", "body", m.ServiceMqttAuthenticationClientCertRequest); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeServiceRestIncomingAuthenticationClientCertRequestPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","never","when-enabled-in-message-vpn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeServiceRestIncomingAuthenticationClientCertRequestPropEnum = append(msgVpnTypeServiceRestIncomingAuthenticationClientCertRequestPropEnum, v)
	}
}

const (

	// MsgVpnServiceRestIncomingAuthenticationClientCertRequestAlways captures enum value "always"
	MsgVpnServiceRestIncomingAuthenticationClientCertRequestAlways string = "always"

	// MsgVpnServiceRestIncomingAuthenticationClientCertRequestNever captures enum value "never"
	MsgVpnServiceRestIncomingAuthenticationClientCertRequestNever string = "never"

	// MsgVpnServiceRestIncomingAuthenticationClientCertRequestWhenDashEnabledDashInDashMessageDashVpn captures enum value "when-enabled-in-message-vpn"
	MsgVpnServiceRestIncomingAuthenticationClientCertRequestWhenDashEnabledDashInDashMessageDashVpn string = "when-enabled-in-message-vpn"
)

// prop value enum
func (m *MsgVpn) validateServiceRestIncomingAuthenticationClientCertRequestEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeServiceRestIncomingAuthenticationClientCertRequestPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateServiceRestIncomingAuthenticationClientCertRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceRestIncomingAuthenticationClientCertRequest) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceRestIncomingAuthenticationClientCertRequestEnum("serviceRestIncomingAuthenticationClientCertRequest", "body", m.ServiceRestIncomingAuthenticationClientCertRequest); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeServiceRestIncomingAuthorizationHeaderHandlingPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["drop","forward","legacy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeServiceRestIncomingAuthorizationHeaderHandlingPropEnum = append(msgVpnTypeServiceRestIncomingAuthorizationHeaderHandlingPropEnum, v)
	}
}

const (

	// MsgVpnServiceRestIncomingAuthorizationHeaderHandlingDrop captures enum value "drop"
	MsgVpnServiceRestIncomingAuthorizationHeaderHandlingDrop string = "drop"

	// MsgVpnServiceRestIncomingAuthorizationHeaderHandlingForward captures enum value "forward"
	MsgVpnServiceRestIncomingAuthorizationHeaderHandlingForward string = "forward"

	// MsgVpnServiceRestIncomingAuthorizationHeaderHandlingLegacy captures enum value "legacy"
	MsgVpnServiceRestIncomingAuthorizationHeaderHandlingLegacy string = "legacy"
)

// prop value enum
func (m *MsgVpn) validateServiceRestIncomingAuthorizationHeaderHandlingEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeServiceRestIncomingAuthorizationHeaderHandlingPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateServiceRestIncomingAuthorizationHeaderHandling(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceRestIncomingAuthorizationHeaderHandling) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceRestIncomingAuthorizationHeaderHandlingEnum("serviceRestIncomingAuthorizationHeaderHandling", "body", m.ServiceRestIncomingAuthorizationHeaderHandling); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeServiceRestModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["gateway","messaging"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeServiceRestModePropEnum = append(msgVpnTypeServiceRestModePropEnum, v)
	}
}

const (

	// MsgVpnServiceRestModeGateway captures enum value "gateway"
	MsgVpnServiceRestModeGateway string = "gateway"

	// MsgVpnServiceRestModeMessaging captures enum value "messaging"
	MsgVpnServiceRestModeMessaging string = "messaging"
)

// prop value enum
func (m *MsgVpn) validateServiceRestModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeServiceRestModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateServiceRestMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceRestMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceRestModeEnum("serviceRestMode", "body", m.ServiceRestMode); err != nil {
		return err
	}

	return nil
}

var msgVpnTypeServiceWebAuthenticationClientCertRequestPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","never","when-enabled-in-message-vpn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnTypeServiceWebAuthenticationClientCertRequestPropEnum = append(msgVpnTypeServiceWebAuthenticationClientCertRequestPropEnum, v)
	}
}

const (

	// MsgVpnServiceWebAuthenticationClientCertRequestAlways captures enum value "always"
	MsgVpnServiceWebAuthenticationClientCertRequestAlways string = "always"

	// MsgVpnServiceWebAuthenticationClientCertRequestNever captures enum value "never"
	MsgVpnServiceWebAuthenticationClientCertRequestNever string = "never"

	// MsgVpnServiceWebAuthenticationClientCertRequestWhenDashEnabledDashInDashMessageDashVpn captures enum value "when-enabled-in-message-vpn"
	MsgVpnServiceWebAuthenticationClientCertRequestWhenDashEnabledDashInDashMessageDashVpn string = "when-enabled-in-message-vpn"
)

// prop value enum
func (m *MsgVpn) validateServiceWebAuthenticationClientCertRequestEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnTypeServiceWebAuthenticationClientCertRequestPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpn) validateServiceWebAuthenticationClientCertRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceWebAuthenticationClientCertRequest) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceWebAuthenticationClientCertRequestEnum("serviceWebAuthenticationClientCertRequest", "body", m.ServiceWebAuthenticationClientCertRequest); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this msg vpn based on the context it is used
func (m *MsgVpn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventEgressFlowCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventEgressMsgRateThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventEndpointCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventIngressFlowCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventIngressMsgRateThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventMsgSpoolUsageThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventServiceAmqpConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventServiceMqttConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventServiceRestIncomingConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventServiceSmfConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventServiceWebConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventSubscriptionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventTransactedSessionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventTransactionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MsgVpn) contextValidateEventConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventConnectionCountThreshold != nil {
		if err := m.EventConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventEgressFlowCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventEgressFlowCountThreshold != nil {
		if err := m.EventEgressFlowCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEgressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventEgressMsgRateThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventEgressMsgRateThreshold != nil {
		if err := m.EventEgressMsgRateThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEgressMsgRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventEndpointCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventEndpointCountThreshold != nil {
		if err := m.EventEndpointCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventEndpointCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventIngressFlowCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventIngressFlowCountThreshold != nil {
		if err := m.EventIngressFlowCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventIngressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventIngressMsgRateThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventIngressMsgRateThreshold != nil {
		if err := m.EventIngressMsgRateThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventIngressMsgRateThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventMsgSpoolUsageThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventMsgSpoolUsageThreshold != nil {
		if err := m.EventMsgSpoolUsageThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventMsgSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventServiceAmqpConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventServiceAmqpConnectionCountThreshold != nil {
		if err := m.EventServiceAmqpConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceAmqpConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventServiceMqttConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventServiceMqttConnectionCountThreshold != nil {
		if err := m.EventServiceMqttConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceMqttConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventServiceRestIncomingConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventServiceRestIncomingConnectionCountThreshold != nil {
		if err := m.EventServiceRestIncomingConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceRestIncomingConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventServiceSmfConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventServiceSmfConnectionCountThreshold != nil {
		if err := m.EventServiceSmfConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceSmfConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventServiceWebConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventServiceWebConnectionCountThreshold != nil {
		if err := m.EventServiceWebConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventServiceWebConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventSubscriptionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventSubscriptionCountThreshold != nil {
		if err := m.EventSubscriptionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventSubscriptionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventTransactedSessionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventTransactedSessionCountThreshold != nil {
		if err := m.EventTransactedSessionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTransactedSessionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpn) contextValidateEventTransactionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.EventTransactionCountThreshold != nil {
		if err := m.EventTransactionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventTransactionCountThreshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpn) UnmarshalBinary(b []byte) error {
	var res MsgVpn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
