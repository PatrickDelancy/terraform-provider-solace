// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AboutUser about user
//
// swagger:model AboutUser
type AboutUser struct {

	// The global access level of the User. The allowed values and their meaning are:
	//
	// <pre>
	// "admin" - Full administrative access.
	// "none" - No access.
	// "read-only" - Read only access.
	// "read-write" - Read and write access.
	// </pre>
	//
	// Enum: [admin none read-only read-write]
	GlobalAccessLevel string `json:"globalAccessLevel,omitempty"`

	// The timestamp of when the session was created. This value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time). Available since 2.21.
	SessionCreateTime int32 `json:"sessionCreateTime,omitempty"`

	// The current server timestamp. This is provided as a reference point for the other timestamps provided. This value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time). Available since 2.21.
	SessionCurrentTime int32 `json:"sessionCurrentTime,omitempty"`

	// The hard expiry time for the session. After this time the session will be invalid, regardless of activity. This value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time). Available since 2.21.
	SessionHardExpiryTime int32 `json:"sessionHardExpiryTime,omitempty"`

	// An identifier for the session to differentiate this session from other sessions for the same user. This value is not guaranteed to be unique between active sessions for different users. Available since 2.21.
	SessionID string `json:"sessionId,omitempty"`

	// The session idle expiry time. After this time the session will be invalid if there has been no activity. This value represents the number of seconds since 1970-01-01 00:00:00 UTC (Unix time). Available since 2.21.
	SessionIdleExpiryTime int32 `json:"sessionIdleExpiryTime,omitempty"`

	// The username of the User. Available since 2.21.
	Username string `json:"username,omitempty"`
}

// Validate validates this about user
func (m *AboutUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGlobalAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var aboutUserTypeGlobalAccessLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","none","read-only","read-write"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aboutUserTypeGlobalAccessLevelPropEnum = append(aboutUserTypeGlobalAccessLevelPropEnum, v)
	}
}

const (

	// AboutUserGlobalAccessLevelAdmin captures enum value "admin"
	AboutUserGlobalAccessLevelAdmin string = "admin"

	// AboutUserGlobalAccessLevelNone captures enum value "none"
	AboutUserGlobalAccessLevelNone string = "none"

	// AboutUserGlobalAccessLevelReadDashOnly captures enum value "read-only"
	AboutUserGlobalAccessLevelReadDashOnly string = "read-only"

	// AboutUserGlobalAccessLevelReadDashWrite captures enum value "read-write"
	AboutUserGlobalAccessLevelReadDashWrite string = "read-write"
)

// prop value enum
func (m *AboutUser) validateGlobalAccessLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, aboutUserTypeGlobalAccessLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AboutUser) validateGlobalAccessLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalAccessLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateGlobalAccessLevelEnum("globalAccessLevel", "body", m.GlobalAccessLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this about user based on context it is used
func (m *AboutUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AboutUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AboutUser) UnmarshalBinary(b []byte) error {
	var res AboutUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
