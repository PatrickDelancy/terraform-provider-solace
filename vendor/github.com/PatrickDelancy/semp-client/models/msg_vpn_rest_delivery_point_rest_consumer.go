// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnRestDeliveryPointRestConsumer msg vpn rest delivery point rest consumer
//
// swagger:model MsgVpnRestDeliveryPointRestConsumer
type MsgVpnRestDeliveryPointRestConsumer struct {

	// The PEM formatted content for the client certificate that the REST Consumer will present to the REST host. It must consist of a private key and between one and three certificates comprising the certificate trust chain. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. Changing this attribute requires an HTTPS connection. The default value is `""`. Available since 2.9.
	AuthenticationClientCertContent string `json:"authenticationClientCertContent,omitempty"`

	// The password for the client certificate. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. Changing this attribute requires an HTTPS connection. The default value is `""`. Available since 2.9.
	AuthenticationClientCertPassword string `json:"authenticationClientCertPassword,omitempty"`

	// The password for the username. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. The default value is `""`.
	AuthenticationHTTPBasicPassword string `json:"authenticationHttpBasicPassword,omitempty"`

	// The username that the REST Consumer will use to login to the REST host. Normally a username is only configured when basic authentication is selected for the REST Consumer. The default value is `""`.
	AuthenticationHTTPBasicUsername string `json:"authenticationHttpBasicUsername,omitempty"`

	// The authentication header name. The default value is `""`. Available since 2.15.
	AuthenticationHTTPHeaderName string `json:"authenticationHttpHeaderName,omitempty"`

	// The authentication header value. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. The default value is `""`. Available since 2.15.
	AuthenticationHTTPHeaderValue string `json:"authenticationHttpHeaderValue,omitempty"`

	// The OAuth client ID. The default value is `""`. Available since 2.19.
	AuthenticationOauthClientID string `json:"authenticationOauthClientId,omitempty"`

	// The OAuth scope. The default value is `""`. Available since 2.19.
	AuthenticationOauthClientScope string `json:"authenticationOauthClientScope,omitempty"`

	// The OAuth client secret. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. The default value is `""`. Available since 2.19.
	AuthenticationOauthClientSecret string `json:"authenticationOauthClientSecret,omitempty"`

	// The OAuth token endpoint URL that the REST Consumer will use to request a token for login to the REST host. Must begin with "https". The default value is `""`. Available since 2.19.
	AuthenticationOauthClientTokenEndpoint string `json:"authenticationOauthClientTokenEndpoint,omitempty"`

	// The OAuth secret key used to sign the token request JWT. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. The default value is `""`. Available since 2.21.
	AuthenticationOauthJwtSecretKey string `json:"authenticationOauthJwtSecretKey,omitempty"`

	// The OAuth token endpoint URL that the REST Consumer will use to request a token for login to the REST host. The default value is `""`. Available since 2.21.
	AuthenticationOauthJwtTokenEndpoint string `json:"authenticationOauthJwtTokenEndpoint,omitempty"`

	// The authentication scheme used by the REST Consumer to login to the REST host. The default value is `"none"`. The allowed values and their meaning are:
	//
	// <pre>
	// "none" - Login with no authentication. This may be useful for anonymous connections or when a REST Consumer does not require authentication.
	// "http-basic" - Login with a username and optional password according to HTTP Basic authentication as per RFC2616.
	// "client-certificate" - Login with a client TLS certificate as per RFC5246. Client certificate authentication is only available on TLS connections.
	// "http-header" - Login with a specified HTTP header.
	// "oauth-client" - Login with OAuth 2.0 client credentials.
	// "oauth-jwt" - Login with OAuth (RFC 7523 JWT Profile).
	// "transparent" - Login using the Authorization header from the message properties, if present. Transparent authentication passes along existing Authorization header metadata instead of discarding it. Note that if the message is coming from a REST producer, the REST service must be configured to forward the Authorization header.
	// </pre>
	//
	// Enum: [none http-basic client-certificate http-header oauth-client oauth-jwt transparent]
	AuthenticationScheme string `json:"authenticationScheme,omitempty"`

	// Enable or disable the REST Consumer. When disabled, no connections are initiated or messages delivered to this particular REST Consumer. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// The HTTP method to use (POST or PUT). This is used only when operating in the REST service "messaging" mode and is ignored in "gateway" mode. The default value is `"post"`. The allowed values and their meaning are:
	//
	// <pre>
	// "post" - Use the POST HTTP method.
	// "put" - Use the PUT HTTP method.
	// </pre>
	//  Available since 2.17.
	// Enum: [post put]
	HTTPMethod string `json:"httpMethod,omitempty"`

	// The interface that will be used for all outgoing connections associated with the REST Consumer. When unspecified, an interface is automatically chosen. The default value is `""`.
	LocalInterface string `json:"localInterface,omitempty"`

	// The maximum amount of time (in seconds) to wait for an HTTP POST response from the REST Consumer. Once this time is exceeded, the TCP connection is reset. The default value is `30`.
	MaxPostWaitTime int32 `json:"maxPostWaitTime,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The number of concurrent TCP connections open to the REST Consumer. The default value is `3`.
	OutgoingConnectionCount int32 `json:"outgoingConnectionCount,omitempty"`

	// The IP address or DNS name to which the broker is to connect to deliver messages for the REST Consumer. A host value must be configured for the REST Consumer to be operationally up. The default value is `""`.
	RemoteHost string `json:"remoteHost,omitempty"`

	// The port associated with the host of the REST Consumer. The default value is `8080`.
	RemotePort int64 `json:"remotePort,omitempty"`

	// The name of the REST Consumer.
	RestConsumerName string `json:"restConsumerName,omitempty"`

	// The name of the REST Delivery Point.
	RestDeliveryPointName string `json:"restDeliveryPointName,omitempty"`

	// The number of seconds that must pass before retrying the remote REST Consumer connection. The default value is `3`.
	RetryDelay int32 `json:"retryDelay,omitempty"`

	// The colon-separated list of cipher suites the REST Consumer uses in its encrypted connection. The value `"default"` implies all supported suites ordered from most secure to least secure. The list of default cipher suites is available in the `tlsCipherSuiteMsgBackboneDefaultList` attribute of the Broker object in the Monitoring API. The REST Consumer should choose the first suite from this list that it supports. The default value is `"default"`.
	TLSCipherSuiteList string `json:"tlsCipherSuiteList,omitempty"`

	// Enable or disable encryption (TLS) for the REST Consumer. The default value is `false`.
	TLSEnabled bool `json:"tlsEnabled,omitempty"`
}

// Validate validates this msg vpn rest delivery point rest consumer
func (m *MsgVpnRestDeliveryPointRestConsumer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationScheme(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnRestDeliveryPointRestConsumerTypeAuthenticationSchemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","http-basic","client-certificate","http-header","oauth-client","oauth-jwt","transparent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnRestDeliveryPointRestConsumerTypeAuthenticationSchemePropEnum = append(msgVpnRestDeliveryPointRestConsumerTypeAuthenticationSchemePropEnum, v)
	}
}

const (

	// MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeNone captures enum value "none"
	MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeNone string = "none"

	// MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeHTTPDashBasic captures enum value "http-basic"
	MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeHTTPDashBasic string = "http-basic"

	// MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeClientDashCertificate captures enum value "client-certificate"
	MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeClientDashCertificate string = "client-certificate"

	// MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeHTTPDashHeader captures enum value "http-header"
	MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeHTTPDashHeader string = "http-header"

	// MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeOauthDashClient captures enum value "oauth-client"
	MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeOauthDashClient string = "oauth-client"

	// MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeOauthDashJwt captures enum value "oauth-jwt"
	MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeOauthDashJwt string = "oauth-jwt"

	// MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeTransparent captures enum value "transparent"
	MsgVpnRestDeliveryPointRestConsumerAuthenticationSchemeTransparent string = "transparent"
)

// prop value enum
func (m *MsgVpnRestDeliveryPointRestConsumer) validateAuthenticationSchemeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnRestDeliveryPointRestConsumerTypeAuthenticationSchemePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnRestDeliveryPointRestConsumer) validateAuthenticationScheme(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthenticationScheme) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthenticationSchemeEnum("authenticationScheme", "body", m.AuthenticationScheme); err != nil {
		return err
	}

	return nil
}

var msgVpnRestDeliveryPointRestConsumerTypeHTTPMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["post","put"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnRestDeliveryPointRestConsumerTypeHTTPMethodPropEnum = append(msgVpnRestDeliveryPointRestConsumerTypeHTTPMethodPropEnum, v)
	}
}

const (

	// MsgVpnRestDeliveryPointRestConsumerHTTPMethodPost captures enum value "post"
	MsgVpnRestDeliveryPointRestConsumerHTTPMethodPost string = "post"

	// MsgVpnRestDeliveryPointRestConsumerHTTPMethodPut captures enum value "put"
	MsgVpnRestDeliveryPointRestConsumerHTTPMethodPut string = "put"
)

// prop value enum
func (m *MsgVpnRestDeliveryPointRestConsumer) validateHTTPMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnRestDeliveryPointRestConsumerTypeHTTPMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnRestDeliveryPointRestConsumer) validateHTTPMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.HTTPMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPMethodEnum("httpMethod", "body", m.HTTPMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this msg vpn rest delivery point rest consumer based on context it is used
func (m *MsgVpnRestDeliveryPointRestConsumer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnRestDeliveryPointRestConsumer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnRestDeliveryPointRestConsumer) UnmarshalBinary(b []byte) error {
	var res MsgVpnRestDeliveryPointRestConsumer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
