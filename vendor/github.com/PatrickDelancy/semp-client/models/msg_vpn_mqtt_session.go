// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MsgVpnMqttSession msg vpn mqtt session
//
// swagger:model MsgVpnMqttSession
type MsgVpnMqttSession struct {

	// Enable or disable the MQTT Session. When disabled, the client is disconnected, new messages matching QoS 0 subscriptions are discarded, and new messages matching QoS 1 subscriptions are stored for future delivery. The default value is `false`.
	Enabled bool `json:"enabled,omitempty"`

	// The Client ID of the MQTT Session, which corresponds to the ClientId provided in the MQTT CONNECT packet.
	MqttSessionClientID string `json:"mqttSessionClientId,omitempty"`

	// The virtual router of the MQTT Session. The allowed values and their meaning are:
	//
	// <pre>
	// "primary" - The MQTT Session belongs to the primary virtual router.
	// "backup" - The MQTT Session belongs to the backup virtual router.
	// </pre>
	//
	// Enum: [primary backup]
	MqttSessionVirtualRouter string `json:"mqttSessionVirtualRouter,omitempty"`

	// The name of the Message VPN.
	MsgVpnName string `json:"msgVpnName,omitempty"`

	// The owner of the MQTT Session. For externally-created sessions this defaults to the Client Username of the connecting client. For management-created sessions this defaults to empty. The default value is `""`.
	Owner string `json:"owner,omitempty"`

	// Enable or disable the propagation of consumer acknowledgements (ACKs) received on the active replication Message VPN to the standby replication Message VPN. The default value is `true`. Available since 2.14.
	QueueConsumerAckPropagationEnabled bool `json:"queueConsumerAckPropagationEnabled,omitempty"`

	// The name of the Dead Message Queue (DMQ) used by the MQTT Session Queue. The default value is `"#DEAD_MSG_QUEUE"`. Available since 2.14.
	QueueDeadMsgQueue string `json:"queueDeadMsgQueue,omitempty"`

	// queue event bind count threshold
	QueueEventBindCountThreshold *EventThreshold `json:"queueEventBindCountThreshold,omitempty"`

	// queue event msg spool usage threshold
	QueueEventMsgSpoolUsageThreshold *EventThreshold `json:"queueEventMsgSpoolUsageThreshold,omitempty"`

	// queue event reject low priority msg limit threshold
	QueueEventRejectLowPriorityMsgLimitThreshold *EventThreshold `json:"queueEventRejectLowPriorityMsgLimitThreshold,omitempty"`

	// The maximum number of consumer flows that can bind to the MQTT Session Queue. The default value is `1000`. Available since 2.14.
	QueueMaxBindCount int64 `json:"queueMaxBindCount,omitempty"`

	// The maximum number of messages delivered but not acknowledged per flow for the MQTT Session Queue. The default value is `10000`. Available since 2.14.
	QueueMaxDeliveredUnackedMsgsPerFlow int64 `json:"queueMaxDeliveredUnackedMsgsPerFlow,omitempty"`

	// The maximum message size allowed in the MQTT Session Queue, in bytes (B). The default value is `10000000`. Available since 2.14.
	QueueMaxMsgSize int32 `json:"queueMaxMsgSize,omitempty"`

	// The maximum message spool usage allowed by the MQTT Session Queue, in megabytes (MB). A value of 0 only allows spooling of the last message received and disables quota checking. The default value is `5000`. Available since 2.14.
	QueueMaxMsgSpoolUsage int64 `json:"queueMaxMsgSpoolUsage,omitempty"`

	// The maximum number of times the MQTT Session Queue will attempt redelivery of a message prior to it being discarded or moved to the DMQ. A value of 0 means to retry forever. The default value is `0`. Available since 2.14.
	QueueMaxRedeliveryCount int64 `json:"queueMaxRedeliveryCount,omitempty"`

	// The maximum time in seconds a message can stay in the MQTT Session Queue when `queueRespectTtlEnabled` is `"true"`. A message expires when the lesser of the sender assigned time-to-live (TTL) in the message and the `queueMaxTtl` configured for the MQTT Session Queue, is exceeded. A value of 0 disables expiry. The default value is `0`. Available since 2.14.
	QueueMaxTTL int64 `json:"queueMaxTtl,omitempty"`

	// Enable or disable the checking of low priority messages against the `queueRejectLowPriorityMsgLimit`. This may only be enabled if `queueRejectMsgToSenderOnDiscardBehavior` does not have a value of `"never"`. The default value is `false`. Available since 2.14.
	QueueRejectLowPriorityMsgEnabled bool `json:"queueRejectLowPriorityMsgEnabled,omitempty"`

	// The number of messages of any priority in the MQTT Session Queue above which low priority messages are not admitted but higher priority messages are allowed. The default value is `0`. Available since 2.14.
	QueueRejectLowPriorityMsgLimit int64 `json:"queueRejectLowPriorityMsgLimit,omitempty"`

	// Determines when to return negative acknowledgements (NACKs) to sending clients on message discards. Note that NACKs cause the message to not be delivered to any destination and Transacted Session commits to fail. The default value is `"when-queue-enabled"`. The allowed values and their meaning are:
	//
	// <pre>
	// "always" - Always return a negative acknowledgment (NACK) to the sending client on message discard.
	// "when-queue-enabled" - Only return a negative acknowledgment (NACK) to the sending client on message discard when the Queue is enabled.
	// "never" - Never return a negative acknowledgment (NACK) to the sending client on message discard.
	// </pre>
	//  Available since 2.14.
	// Enum: [always when-queue-enabled never]
	QueueRejectMsgToSenderOnDiscardBehavior string `json:"queueRejectMsgToSenderOnDiscardBehavior,omitempty"`

	// Enable or disable the respecting of the time-to-live (TTL) for messages in the MQTT Session Queue. When enabled, expired messages are discarded or moved to the DMQ. The default value is `false`. Available since 2.14.
	QueueRespectTTLEnabled bool `json:"queueRespectTtlEnabled,omitempty"`
}

// Validate validates this msg vpn mqtt session
func (m *MsgVpnMqttSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMqttSessionVirtualRouter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueEventBindCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueEventMsgSpoolUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueEventRejectLowPriorityMsgLimitThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueRejectMsgToSenderOnDiscardBehavior(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var msgVpnMqttSessionTypeMqttSessionVirtualRouterPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["primary","backup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnMqttSessionTypeMqttSessionVirtualRouterPropEnum = append(msgVpnMqttSessionTypeMqttSessionVirtualRouterPropEnum, v)
	}
}

const (

	// MsgVpnMqttSessionMqttSessionVirtualRouterPrimary captures enum value "primary"
	MsgVpnMqttSessionMqttSessionVirtualRouterPrimary string = "primary"

	// MsgVpnMqttSessionMqttSessionVirtualRouterBackup captures enum value "backup"
	MsgVpnMqttSessionMqttSessionVirtualRouterBackup string = "backup"
)

// prop value enum
func (m *MsgVpnMqttSession) validateMqttSessionVirtualRouterEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnMqttSessionTypeMqttSessionVirtualRouterPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnMqttSession) validateMqttSessionVirtualRouter(formats strfmt.Registry) error {
	if swag.IsZero(m.MqttSessionVirtualRouter) { // not required
		return nil
	}

	// value enum
	if err := m.validateMqttSessionVirtualRouterEnum("mqttSessionVirtualRouter", "body", m.MqttSessionVirtualRouter); err != nil {
		return err
	}

	return nil
}

func (m *MsgVpnMqttSession) validateQueueEventBindCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.QueueEventBindCountThreshold) { // not required
		return nil
	}

	if m.QueueEventBindCountThreshold != nil {
		if err := m.QueueEventBindCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueEventBindCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnMqttSession) validateQueueEventMsgSpoolUsageThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.QueueEventMsgSpoolUsageThreshold) { // not required
		return nil
	}

	if m.QueueEventMsgSpoolUsageThreshold != nil {
		if err := m.QueueEventMsgSpoolUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueEventMsgSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnMqttSession) validateQueueEventRejectLowPriorityMsgLimitThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.QueueEventRejectLowPriorityMsgLimitThreshold) { // not required
		return nil
	}

	if m.QueueEventRejectLowPriorityMsgLimitThreshold != nil {
		if err := m.QueueEventRejectLowPriorityMsgLimitThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueEventRejectLowPriorityMsgLimitThreshold")
			}
			return err
		}
	}

	return nil
}

var msgVpnMqttSessionTypeQueueRejectMsgToSenderOnDiscardBehaviorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","when-queue-enabled","never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		msgVpnMqttSessionTypeQueueRejectMsgToSenderOnDiscardBehaviorPropEnum = append(msgVpnMqttSessionTypeQueueRejectMsgToSenderOnDiscardBehaviorPropEnum, v)
	}
}

const (

	// MsgVpnMqttSessionQueueRejectMsgToSenderOnDiscardBehaviorAlways captures enum value "always"
	MsgVpnMqttSessionQueueRejectMsgToSenderOnDiscardBehaviorAlways string = "always"

	// MsgVpnMqttSessionQueueRejectMsgToSenderOnDiscardBehaviorWhenDashQueueDashEnabled captures enum value "when-queue-enabled"
	MsgVpnMqttSessionQueueRejectMsgToSenderOnDiscardBehaviorWhenDashQueueDashEnabled string = "when-queue-enabled"

	// MsgVpnMqttSessionQueueRejectMsgToSenderOnDiscardBehaviorNever captures enum value "never"
	MsgVpnMqttSessionQueueRejectMsgToSenderOnDiscardBehaviorNever string = "never"
)

// prop value enum
func (m *MsgVpnMqttSession) validateQueueRejectMsgToSenderOnDiscardBehaviorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, msgVpnMqttSessionTypeQueueRejectMsgToSenderOnDiscardBehaviorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MsgVpnMqttSession) validateQueueRejectMsgToSenderOnDiscardBehavior(formats strfmt.Registry) error {
	if swag.IsZero(m.QueueRejectMsgToSenderOnDiscardBehavior) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueueRejectMsgToSenderOnDiscardBehaviorEnum("queueRejectMsgToSenderOnDiscardBehavior", "body", m.QueueRejectMsgToSenderOnDiscardBehavior); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this msg vpn mqtt session based on the context it is used
func (m *MsgVpnMqttSession) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQueueEventBindCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueueEventMsgSpoolUsageThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueueEventRejectLowPriorityMsgLimitThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MsgVpnMqttSession) contextValidateQueueEventBindCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.QueueEventBindCountThreshold != nil {
		if err := m.QueueEventBindCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueEventBindCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnMqttSession) contextValidateQueueEventMsgSpoolUsageThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.QueueEventMsgSpoolUsageThreshold != nil {
		if err := m.QueueEventMsgSpoolUsageThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueEventMsgSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *MsgVpnMqttSession) contextValidateQueueEventRejectLowPriorityMsgLimitThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.QueueEventRejectLowPriorityMsgLimitThreshold != nil {
		if err := m.QueueEventRejectLowPriorityMsgLimitThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("queueEventRejectLowPriorityMsgLimitThreshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MsgVpnMqttSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MsgVpnMqttSession) UnmarshalBinary(b []byte) error {
	var res MsgVpnMqttSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
