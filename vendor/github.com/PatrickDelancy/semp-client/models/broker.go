// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Broker broker
//
// swagger:model Broker
type Broker struct {

	// The client certificate revocation checking mode used when a client authenticates with a client certificate. The default value is `"none"`. The allowed values and their meaning are:
	//
	// <pre>
	// "none" - Do not perform any certificate revocation checking.
	// "ocsp" - Use the Open Certificate Status Protcol (OCSP) for certificate revocation checking.
	// "crl" - Use Certificate Revocation Lists (CRL) for certificate revocation checking.
	// "ocsp-crl" - Use OCSP first, but if OCSP fails to return an unambiguous result, then check via CRL.
	// </pre>
	//
	// Enum: [none ocsp crl ocsp-crl]
	AuthClientCertRevocationCheckMode string `json:"authClientCertRevocationCheckMode,omitempty"`

	// Enable or disable Guaranteed Messaging. The default value is `false`. Available since 2.18.
	GuaranteedMsgingEnabled bool `json:"guaranteedMsgingEnabled,omitempty"`

	// guaranteed msging event cache usage threshold
	GuaranteedMsgingEventCacheUsageThreshold *EventThreshold `json:"guaranteedMsgingEventCacheUsageThreshold,omitempty"`

	// guaranteed msging event delivered unacked threshold
	GuaranteedMsgingEventDeliveredUnackedThreshold *EventThresholdByPercent `json:"guaranteedMsgingEventDeliveredUnackedThreshold,omitempty"`

	// guaranteed msging event disk usage threshold
	GuaranteedMsgingEventDiskUsageThreshold *EventThresholdByPercent `json:"guaranteedMsgingEventDiskUsageThreshold,omitempty"`

	// guaranteed msging event egress flow count threshold
	GuaranteedMsgingEventEgressFlowCountThreshold *EventThreshold `json:"guaranteedMsgingEventEgressFlowCountThreshold,omitempty"`

	// guaranteed msging event endpoint count threshold
	GuaranteedMsgingEventEndpointCountThreshold *EventThreshold `json:"guaranteedMsgingEventEndpointCountThreshold,omitempty"`

	// guaranteed msging event ingress flow count threshold
	GuaranteedMsgingEventIngressFlowCountThreshold *EventThreshold `json:"guaranteedMsgingEventIngressFlowCountThreshold,omitempty"`

	// guaranteed msging event msg count threshold
	GuaranteedMsgingEventMsgCountThreshold *EventThresholdByPercent `json:"guaranteedMsgingEventMsgCountThreshold,omitempty"`

	// guaranteed msging event msg spool file count threshold
	GuaranteedMsgingEventMsgSpoolFileCountThreshold *EventThresholdByPercent `json:"guaranteedMsgingEventMsgSpoolFileCountThreshold,omitempty"`

	// guaranteed msging event msg spool usage threshold
	GuaranteedMsgingEventMsgSpoolUsageThreshold *EventThreshold `json:"guaranteedMsgingEventMsgSpoolUsageThreshold,omitempty"`

	// guaranteed msging event transacted session count threshold
	GuaranteedMsgingEventTransactedSessionCountThreshold *EventThreshold `json:"guaranteedMsgingEventTransactedSessionCountThreshold,omitempty"`

	// guaranteed msging event transacted session resource count threshold
	GuaranteedMsgingEventTransactedSessionResourceCountThreshold *EventThresholdByPercent `json:"guaranteedMsgingEventTransactedSessionResourceCountThreshold,omitempty"`

	// guaranteed msging event transaction count threshold
	GuaranteedMsgingEventTransactionCountThreshold *EventThreshold `json:"guaranteedMsgingEventTransactionCountThreshold,omitempty"`

	// Guaranteed messaging cache usage limit. Expressed as a maximum percentage of the NAB's egress queueing. resources that the guaranteed message cache is allowed to use. The default value is `10`. Available since 2.18.
	GuaranteedMsgingMaxCacheUsage int32 `json:"guaranteedMsgingMaxCacheUsage,omitempty"`

	// The maximum total message spool usage allowed across all VPNs on this broker, in megabytes. Recommendation: the maximum value should be less than 90% of the disk space allocated for the guaranteed message spool. The default value is `60000`. Available since 2.18.
	GuaranteedMsgingMaxMsgSpoolUsage int64 `json:"guaranteedMsgingMaxMsgSpoolUsage,omitempty"`

	// The maximum time, in milliseconds, that can be tolerated for remote acknowledgement of synchronization messages before which the remote system will be considered out of sync. The default value is `10000`. Available since 2.18.
	GuaranteedMsgingMsgSpoolSyncMirroredMsgAckTimeout int64 `json:"guaranteedMsgingMsgSpoolSyncMirroredMsgAckTimeout,omitempty"`

	// The maximum time, in milliseconds, that can be tolerated for remote disk writes before which the remote system will be considered out of sync. The default value is `10000`. Available since 2.18.
	GuaranteedMsgingMsgSpoolSyncMirroredSpoolFileAckTimeout int64 `json:"guaranteedMsgingMsgSpoolSyncMirroredSpoolFileAckTimeout,omitempty"`

	// The replication compatibility mode for the router. The default value is `"legacy"`. The allowed values and their meaning are:"legacy" - All transactions originated by clients are replicated to the standby site without using transactions."transacted" - All transactions originated by clients are replicated to the standby site using transactions. The default value is `"legacy"`. The allowed values and their meaning are:
	//
	// <pre>
	// "legacy" - All transactions originated by clients are replicated to the standby site without using transactions.
	// "transacted" - All transactions originated by clients are replicated to the standby site using transactions.
	// </pre>
	//  Available since 2.18.
	// Enum: [legacy transacted]
	GuaranteedMsgingTransactionReplicationCompatibilityMode string `json:"guaranteedMsgingTransactionReplicationCompatibilityMode,omitempty"`

	// Enable or disable the AMQP service. When disabled new AMQP Clients may not connect through the global or per-VPN AMQP listen-ports, and all currently connected AMQP Clients are immediately disconnected. The default value is `false`. Available since 2.17.
	ServiceAmqpEnabled bool `json:"serviceAmqpEnabled,omitempty"`

	// TCP port number that AMQP clients can use to connect to the broker using raw TCP over TLS. The default value is `0`. Available since 2.17.
	ServiceAmqpTLSListenPort int64 `json:"serviceAmqpTlsListenPort,omitempty"`

	// service event connection count threshold
	ServiceEventConnectionCountThreshold *EventThreshold `json:"serviceEventConnectionCountThreshold,omitempty"`

	// Enable or disable the health-check service. The default value is `false`. Available since 2.17.
	ServiceHealthCheckEnabled bool `json:"serviceHealthCheckEnabled,omitempty"`

	// The port number for the health-check service. The port must be unique across the message backbone. The health-check service must be disabled to change the port. The default value is `5550`. Available since 2.17.
	ServiceHealthCheckListenPort int64 `json:"serviceHealthCheckListenPort,omitempty"`

	// Enable or disable the mate-link service. The default value is `true`. Available since 2.17.
	ServiceMateLinkEnabled bool `json:"serviceMateLinkEnabled,omitempty"`

	// The port number for the mate-link service. The port must be unique across the message backbone. The mate-link service must be disabled to change the port. The default value is `8741`. Available since 2.17.
	ServiceMateLinkListenPort int64 `json:"serviceMateLinkListenPort,omitempty"`

	// Enable or disable the MQTT service. When disabled new MQTT Clients may not connect through the per-VPN MQTT listen-ports, and all currently connected MQTT Clients are immediately disconnected. The default value is `false`. Available since 2.17.
	ServiceMqttEnabled bool `json:"serviceMqttEnabled,omitempty"`

	// Enable or disable the msg-backbone service. When disabled new Clients may not connect through global or per-VPN listen-ports, and all currently connected Clients are immediately disconnected. The default value is `true`. Available since 2.17.
	ServiceMsgBackboneEnabled bool `json:"serviceMsgBackboneEnabled,omitempty"`

	// Enable or disable the redundancy service. The default value is `true`. Available since 2.17.
	ServiceRedundancyEnabled bool `json:"serviceRedundancyEnabled,omitempty"`

	// The first listen-port used for the redundancy service. Redundancy uses this port and the subsequent 2 ports. These port must be unique across the message backbone. The redundancy service must be disabled to change this port. The default value is `8300`. Available since 2.17.
	ServiceRedundancyFirstListenPort int64 `json:"serviceRedundancyFirstListenPort,omitempty"`

	// service rest event outgoing connection count threshold
	ServiceRestEventOutgoingConnectionCountThreshold *EventThreshold `json:"serviceRestEventOutgoingConnectionCountThreshold,omitempty"`

	// Enable or disable the REST service incoming connections on the router. The default value is `false`. Available since 2.17.
	ServiceRestIncomingEnabled bool `json:"serviceRestIncomingEnabled,omitempty"`

	// Enable or disable the REST service outgoing connections on the router. The default value is `false`. Available since 2.17.
	ServiceRestOutgoingEnabled bool `json:"serviceRestOutgoingEnabled,omitempty"`

	// Enable or disable extended SEMP timeouts for paged GETs. When a request times out, it returns the current page of content, even if the page is not full.  When enabled, the timeout is 60 seconds. When disabled, the timeout is 5 seconds.  The recommended setting is disabled (no legacy-timeout).  This parameter is intended as a temporary workaround to be used until SEMP clients can handle short pages.  This setting will be removed in a future release. The default value is `false`. Available since 2.18.
	ServiceSempLegacyTimeoutEnabled bool `json:"serviceSempLegacyTimeoutEnabled,omitempty"`

	// Enable or disable plain-text SEMP service. The default value is `true`. Available since 2.17.
	ServiceSempPlainTextEnabled bool `json:"serviceSempPlainTextEnabled,omitempty"`

	// The TCP port for plain-text SEMP client connections. The default value is `80`. Available since 2.17.
	ServiceSempPlainTextListenPort int64 `json:"serviceSempPlainTextListenPort,omitempty"`

	// The session idle timeout, in minutes. Sessions will be invalidated if there is no activity in this period of time. The default value is `15`. Available since 2.21.
	ServiceSempSessionIdleTimeout int32 `json:"serviceSempSessionIdleTimeout,omitempty"`

	// The maximum lifetime of a session, in minutes. Sessions will be invalidated after this period of time, regardless of activity. The default value is `43200`. Available since 2.21.
	ServiceSempSessionMaxLifetime int32 `json:"serviceSempSessionMaxLifetime,omitempty"`

	// Enable or disable TLS SEMP service. The default value is `true`. Available since 2.17.
	ServiceSempTLSEnabled bool `json:"serviceSempTlsEnabled,omitempty"`

	// The TCP port for TLS SEMP client connections. The default value is `1943`. Available since 2.17.
	ServiceSempTLSListenPort int64 `json:"serviceSempTlsListenPort,omitempty"`

	// TCP port number that SMF clients can use to connect to the broker using raw compression TCP. The default value is `55003`. Available since 2.17.
	ServiceSmfCompressionListenPort int64 `json:"serviceSmfCompressionListenPort,omitempty"`

	// Enable or disable the SMF service. When disabled new SMF Clients may not connect through the global listen-ports, and all currently connected SMF Clients are immediately disconnected. The default value is `true`. Available since 2.17.
	ServiceSmfEnabled bool `json:"serviceSmfEnabled,omitempty"`

	// service smf event connection count threshold
	ServiceSmfEventConnectionCountThreshold *EventThreshold `json:"serviceSmfEventConnectionCountThreshold,omitempty"`

	// TCP port number that SMF clients can use to connect to the broker using raw TCP. The default value is `55555`. Available since 2.17.
	ServiceSmfPlainTextListenPort int64 `json:"serviceSmfPlainTextListenPort,omitempty"`

	// TCP port number that SMF clients can use to connect to the broker using raw routing control TCP. The default value is `55556`. Available since 2.17.
	ServiceSmfRoutingControlListenPort int64 `json:"serviceSmfRoutingControlListenPort,omitempty"`

	// TCP port number that SMF clients can use to connect to the broker using raw TCP over TLS. The default value is `55443`. Available since 2.17.
	ServiceSmfTLSListenPort int64 `json:"serviceSmfTlsListenPort,omitempty"`

	// service Tls event connection count threshold
	ServiceTLSEventConnectionCountThreshold *EventThreshold `json:"serviceTlsEventConnectionCountThreshold,omitempty"`

	// Enable or disable the web-transport service. When disabled new web-transport Clients may not connect through the global listen-ports, and all currently connected web-transport Clients are immediately disconnected. The default value is `false`. Available since 2.17.
	ServiceWebTransportEnabled bool `json:"serviceWebTransportEnabled,omitempty"`

	// The TCP port for plain-text WEB client connections. The default value is `8008`. Available since 2.17.
	ServiceWebTransportPlainTextListenPort int64 `json:"serviceWebTransportPlainTextListenPort,omitempty"`

	// The TCP port for TLS WEB client connections. The default value is `1443`. Available since 2.17.
	ServiceWebTransportTLSListenPort int64 `json:"serviceWebTransportTlsListenPort,omitempty"`

	// Used to specify the Web URL suffix that will be used by Web clients when communicating with the broker. The default value is `""`. Available since 2.17.
	ServiceWebTransportWebURLSuffix string `json:"serviceWebTransportWebUrlSuffix,omitempty"`

	// Enable or disable the blocking of TLS version 1.1 connections. When blocked, all existing incoming and outgoing TLS 1.1 connections with Clients, SEMP users, and LDAP servers remain connected while new connections are blocked. Note that support for TLS 1.1 will eventually be discontinued, at which time TLS 1.1 connections will be blocked regardless of this setting. The default value is `false`.
	TLSBlockVersion11Enabled bool `json:"tlsBlockVersion11Enabled,omitempty"`

	// The colon-separated list of cipher suites used for TLS management connections (e.g. SEMP, LDAP). The value "default" implies all supported suites ordered from most secure to least secure. The default value is `"default"`.
	TLSCipherSuiteManagementList string `json:"tlsCipherSuiteManagementList,omitempty"`

	// The colon-separated list of cipher suites used for TLS data connections (e.g. client pub/sub). The value "default" implies all supported suites ordered from most secure to least secure. The default value is `"default"`.
	TLSCipherSuiteMsgBackboneList string `json:"tlsCipherSuiteMsgBackboneList,omitempty"`

	// The colon-separated list of cipher suites used for TLS secure shell connections (e.g. SSH, SFTP, SCP). The value "default" implies all supported suites ordered from most secure to least secure. The default value is `"default"`.
	TLSCipherSuiteSecureShellList string `json:"tlsCipherSuiteSecureShellList,omitempty"`

	// Enable or disable protection against the CRIME exploit. When enabled, TLS+compressed messaging performance is degraded. This protection should only be disabled if sufficient ACL and authentication features are being employed such that a potential attacker does not have sufficient access to trigger the exploit. The default value is `true`.
	TLSCrimeExploitProtectionEnabled bool `json:"tlsCrimeExploitProtectionEnabled,omitempty"`

	// The PEM formatted content for the server certificate used for TLS connections. It must consist of a private key and between one and three certificates comprising the certificate trust chain. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. Changing this attribute requires an HTTPS connection. The default value is `""`.
	TLSServerCertContent string `json:"tlsServerCertContent,omitempty"`

	// The password for the server certificate used for TLS connections. This attribute is absent from a GET and not updated when absent in a PUT, subject to the exceptions in note 4. Changing this attribute requires an HTTPS connection. The default value is `""`.
	TLSServerCertPassword string `json:"tlsServerCertPassword,omitempty"`

	// Enable or disable the standard domain certificate authority list. The default value is `true`. Available since 2.19.
	TLSStandardDomainCertificateAuthoritiesEnabled bool `json:"tlsStandardDomainCertificateAuthoritiesEnabled,omitempty"`

	// The TLS ticket lifetime in seconds. When a client connects with TLS, a session with a session ticket is created using the TLS ticket lifetime which determines how long the client has to resume the session. The default value is `86400`.
	TLSTicketLifetime int32 `json:"tlsTicketLifetime,omitempty"`
}

// Validate validates this broker
func (m *Broker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthClientCertRevocationCheckMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventCacheUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventDeliveredUnackedThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventDiskUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventEgressFlowCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventEndpointCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventIngressFlowCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventMsgCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventMsgSpoolFileCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventMsgSpoolUsageThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventTransactedSessionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventTransactedSessionResourceCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingEventTransactionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteedMsgingTransactionReplicationCompatibilityMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceEventConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRestEventOutgoingConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceSmfEventConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceTLSEventConnectionCountThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var brokerTypeAuthClientCertRevocationCheckModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","ocsp","crl","ocsp-crl"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		brokerTypeAuthClientCertRevocationCheckModePropEnum = append(brokerTypeAuthClientCertRevocationCheckModePropEnum, v)
	}
}

const (

	// BrokerAuthClientCertRevocationCheckModeNone captures enum value "none"
	BrokerAuthClientCertRevocationCheckModeNone string = "none"

	// BrokerAuthClientCertRevocationCheckModeOcsp captures enum value "ocsp"
	BrokerAuthClientCertRevocationCheckModeOcsp string = "ocsp"

	// BrokerAuthClientCertRevocationCheckModeCrl captures enum value "crl"
	BrokerAuthClientCertRevocationCheckModeCrl string = "crl"

	// BrokerAuthClientCertRevocationCheckModeOcspDashCrl captures enum value "ocsp-crl"
	BrokerAuthClientCertRevocationCheckModeOcspDashCrl string = "ocsp-crl"
)

// prop value enum
func (m *Broker) validateAuthClientCertRevocationCheckModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, brokerTypeAuthClientCertRevocationCheckModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Broker) validateAuthClientCertRevocationCheckMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthClientCertRevocationCheckMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAuthClientCertRevocationCheckModeEnum("authClientCertRevocationCheckMode", "body", m.AuthClientCertRevocationCheckMode); err != nil {
		return err
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventCacheUsageThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventCacheUsageThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventCacheUsageThreshold != nil {
		if err := m.GuaranteedMsgingEventCacheUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventCacheUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventDeliveredUnackedThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventDeliveredUnackedThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventDeliveredUnackedThreshold != nil {
		if err := m.GuaranteedMsgingEventDeliveredUnackedThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventDeliveredUnackedThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventDiskUsageThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventDiskUsageThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventDiskUsageThreshold != nil {
		if err := m.GuaranteedMsgingEventDiskUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventDiskUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventEgressFlowCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventEgressFlowCountThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventEgressFlowCountThreshold != nil {
		if err := m.GuaranteedMsgingEventEgressFlowCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventEgressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventEndpointCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventEndpointCountThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventEndpointCountThreshold != nil {
		if err := m.GuaranteedMsgingEventEndpointCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventEndpointCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventIngressFlowCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventIngressFlowCountThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventIngressFlowCountThreshold != nil {
		if err := m.GuaranteedMsgingEventIngressFlowCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventIngressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventMsgCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventMsgCountThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventMsgCountThreshold != nil {
		if err := m.GuaranteedMsgingEventMsgCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventMsgCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventMsgSpoolFileCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventMsgSpoolFileCountThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventMsgSpoolFileCountThreshold != nil {
		if err := m.GuaranteedMsgingEventMsgSpoolFileCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventMsgSpoolFileCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventMsgSpoolUsageThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventMsgSpoolUsageThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventMsgSpoolUsageThreshold != nil {
		if err := m.GuaranteedMsgingEventMsgSpoolUsageThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventMsgSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventTransactedSessionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventTransactedSessionCountThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventTransactedSessionCountThreshold != nil {
		if err := m.GuaranteedMsgingEventTransactedSessionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventTransactedSessionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventTransactedSessionResourceCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventTransactedSessionResourceCountThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventTransactedSessionResourceCountThreshold != nil {
		if err := m.GuaranteedMsgingEventTransactedSessionResourceCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventTransactedSessionResourceCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateGuaranteedMsgingEventTransactionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingEventTransactionCountThreshold) { // not required
		return nil
	}

	if m.GuaranteedMsgingEventTransactionCountThreshold != nil {
		if err := m.GuaranteedMsgingEventTransactionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventTransactionCountThreshold")
			}
			return err
		}
	}

	return nil
}

var brokerTypeGuaranteedMsgingTransactionReplicationCompatibilityModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["legacy","transacted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		brokerTypeGuaranteedMsgingTransactionReplicationCompatibilityModePropEnum = append(brokerTypeGuaranteedMsgingTransactionReplicationCompatibilityModePropEnum, v)
	}
}

const (

	// BrokerGuaranteedMsgingTransactionReplicationCompatibilityModeLegacy captures enum value "legacy"
	BrokerGuaranteedMsgingTransactionReplicationCompatibilityModeLegacy string = "legacy"

	// BrokerGuaranteedMsgingTransactionReplicationCompatibilityModeTransacted captures enum value "transacted"
	BrokerGuaranteedMsgingTransactionReplicationCompatibilityModeTransacted string = "transacted"
)

// prop value enum
func (m *Broker) validateGuaranteedMsgingTransactionReplicationCompatibilityModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, brokerTypeGuaranteedMsgingTransactionReplicationCompatibilityModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Broker) validateGuaranteedMsgingTransactionReplicationCompatibilityMode(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteedMsgingTransactionReplicationCompatibilityMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateGuaranteedMsgingTransactionReplicationCompatibilityModeEnum("guaranteedMsgingTransactionReplicationCompatibilityMode", "body", m.GuaranteedMsgingTransactionReplicationCompatibilityMode); err != nil {
		return err
	}

	return nil
}

func (m *Broker) validateServiceEventConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceEventConnectionCountThreshold) { // not required
		return nil
	}

	if m.ServiceEventConnectionCountThreshold != nil {
		if err := m.ServiceEventConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceEventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateServiceRestEventOutgoingConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceRestEventOutgoingConnectionCountThreshold) { // not required
		return nil
	}

	if m.ServiceRestEventOutgoingConnectionCountThreshold != nil {
		if err := m.ServiceRestEventOutgoingConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceRestEventOutgoingConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateServiceSmfEventConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceSmfEventConnectionCountThreshold) { // not required
		return nil
	}

	if m.ServiceSmfEventConnectionCountThreshold != nil {
		if err := m.ServiceSmfEventConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceSmfEventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) validateServiceTLSEventConnectionCountThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceTLSEventConnectionCountThreshold) { // not required
		return nil
	}

	if m.ServiceTLSEventConnectionCountThreshold != nil {
		if err := m.ServiceTLSEventConnectionCountThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceTlsEventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this broker based on the context it is used
func (m *Broker) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuaranteedMsgingEventCacheUsageThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventDeliveredUnackedThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventDiskUsageThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventEgressFlowCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventEndpointCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventIngressFlowCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventMsgCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventMsgSpoolFileCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventMsgSpoolUsageThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventTransactedSessionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventTransactedSessionResourceCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteedMsgingEventTransactionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceEventConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceRestEventOutgoingConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceSmfEventConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceTLSEventConnectionCountThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventCacheUsageThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventCacheUsageThreshold != nil {
		if err := m.GuaranteedMsgingEventCacheUsageThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventCacheUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventDeliveredUnackedThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventDeliveredUnackedThreshold != nil {
		if err := m.GuaranteedMsgingEventDeliveredUnackedThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventDeliveredUnackedThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventDiskUsageThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventDiskUsageThreshold != nil {
		if err := m.GuaranteedMsgingEventDiskUsageThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventDiskUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventEgressFlowCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventEgressFlowCountThreshold != nil {
		if err := m.GuaranteedMsgingEventEgressFlowCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventEgressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventEndpointCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventEndpointCountThreshold != nil {
		if err := m.GuaranteedMsgingEventEndpointCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventEndpointCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventIngressFlowCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventIngressFlowCountThreshold != nil {
		if err := m.GuaranteedMsgingEventIngressFlowCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventIngressFlowCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventMsgCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventMsgCountThreshold != nil {
		if err := m.GuaranteedMsgingEventMsgCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventMsgCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventMsgSpoolFileCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventMsgSpoolFileCountThreshold != nil {
		if err := m.GuaranteedMsgingEventMsgSpoolFileCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventMsgSpoolFileCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventMsgSpoolUsageThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventMsgSpoolUsageThreshold != nil {
		if err := m.GuaranteedMsgingEventMsgSpoolUsageThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventMsgSpoolUsageThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventTransactedSessionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventTransactedSessionCountThreshold != nil {
		if err := m.GuaranteedMsgingEventTransactedSessionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventTransactedSessionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventTransactedSessionResourceCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventTransactedSessionResourceCountThreshold != nil {
		if err := m.GuaranteedMsgingEventTransactedSessionResourceCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventTransactedSessionResourceCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateGuaranteedMsgingEventTransactionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.GuaranteedMsgingEventTransactionCountThreshold != nil {
		if err := m.GuaranteedMsgingEventTransactionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guaranteedMsgingEventTransactionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateServiceEventConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceEventConnectionCountThreshold != nil {
		if err := m.ServiceEventConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceEventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateServiceRestEventOutgoingConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceRestEventOutgoingConnectionCountThreshold != nil {
		if err := m.ServiceRestEventOutgoingConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceRestEventOutgoingConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateServiceSmfEventConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceSmfEventConnectionCountThreshold != nil {
		if err := m.ServiceSmfEventConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceSmfEventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Broker) contextValidateServiceTLSEventConnectionCountThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceTLSEventConnectionCountThreshold != nil {
		if err := m.ServiceTLSEventConnectionCountThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceTlsEventConnectionCountThreshold")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Broker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Broker) UnmarshalBinary(b []byte) error {
	var res Broker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
