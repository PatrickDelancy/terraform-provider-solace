// Code generated by go-swagger; DO NOT EDIT.

package all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/PatrickDelancy/semp-client/models"
)

// GetClientCertAuthorityOcspTLSTrustedCommonNamesReader is a Reader for the GetClientCertAuthorityOcspTLSTrustedCommonNames structure.
type GetClientCertAuthorityOcspTLSTrustedCommonNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetClientCertAuthorityOcspTLSTrustedCommonNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetClientCertAuthorityOcspTLSTrustedCommonNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetClientCertAuthorityOcspTLSTrustedCommonNamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetClientCertAuthorityOcspTLSTrustedCommonNamesOK creates a GetClientCertAuthorityOcspTLSTrustedCommonNamesOK with default headers values
func NewGetClientCertAuthorityOcspTLSTrustedCommonNamesOK() *GetClientCertAuthorityOcspTLSTrustedCommonNamesOK {
	return &GetClientCertAuthorityOcspTLSTrustedCommonNamesOK{}
}

/* GetClientCertAuthorityOcspTLSTrustedCommonNamesOK describes a response with status code 200, with default header values.

The list of OCSP Responder Trusted Common Name objects' attributes, and the request metadata.
*/
type GetClientCertAuthorityOcspTLSTrustedCommonNamesOK struct {
	Payload *models.ClientCertAuthorityOcspTLSTrustedCommonNamesResponse
}

func (o *GetClientCertAuthorityOcspTLSTrustedCommonNamesOK) Error() string {
	return fmt.Sprintf("[GET /clientCertAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames][%d] getClientCertAuthorityOcspTlsTrustedCommonNamesOK  %+v", 200, o.Payload)
}
func (o *GetClientCertAuthorityOcspTLSTrustedCommonNamesOK) GetPayload() *models.ClientCertAuthorityOcspTLSTrustedCommonNamesResponse {
	return o.Payload
}

func (o *GetClientCertAuthorityOcspTLSTrustedCommonNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClientCertAuthorityOcspTLSTrustedCommonNamesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetClientCertAuthorityOcspTLSTrustedCommonNamesDefault creates a GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault with default headers values
func NewGetClientCertAuthorityOcspTLSTrustedCommonNamesDefault(code int) *GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault {
	return &GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault{
		_statusCode: code,
	}
}

/* GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault describes a response with status code -1, with default header values.

The error response.
*/
type GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault struct {
	_statusCode int

	Payload *models.SempMetaOnlyResponse
}

// Code gets the status code for the get client cert authority ocsp Tls trusted common names default response
func (o *GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault) Code() int {
	return o._statusCode
}

func (o *GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault) Error() string {
	return fmt.Sprintf("[GET /clientCertAuthorities/{certAuthorityName}/ocspTlsTrustedCommonNames][%d] getClientCertAuthorityOcspTlsTrustedCommonNames default  %+v", o._statusCode, o.Payload)
}
func (o *GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault) GetPayload() *models.SempMetaOnlyResponse {
	return o.Payload
}

func (o *GetClientCertAuthorityOcspTLSTrustedCommonNamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SempMetaOnlyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
