// Code generated by go-swagger; DO NOT EDIT.

package all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/PatrickDelancy/semp-client/models"
)

// NewReplaceMsgVpnTopicEndpointParams creates a new ReplaceMsgVpnTopicEndpointParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReplaceMsgVpnTopicEndpointParams() *ReplaceMsgVpnTopicEndpointParams {
	return &ReplaceMsgVpnTopicEndpointParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReplaceMsgVpnTopicEndpointParamsWithTimeout creates a new ReplaceMsgVpnTopicEndpointParams object
// with the ability to set a timeout on a request.
func NewReplaceMsgVpnTopicEndpointParamsWithTimeout(timeout time.Duration) *ReplaceMsgVpnTopicEndpointParams {
	return &ReplaceMsgVpnTopicEndpointParams{
		timeout: timeout,
	}
}

// NewReplaceMsgVpnTopicEndpointParamsWithContext creates a new ReplaceMsgVpnTopicEndpointParams object
// with the ability to set a context for a request.
func NewReplaceMsgVpnTopicEndpointParamsWithContext(ctx context.Context) *ReplaceMsgVpnTopicEndpointParams {
	return &ReplaceMsgVpnTopicEndpointParams{
		Context: ctx,
	}
}

// NewReplaceMsgVpnTopicEndpointParamsWithHTTPClient creates a new ReplaceMsgVpnTopicEndpointParams object
// with the ability to set a custom HTTPClient for a request.
func NewReplaceMsgVpnTopicEndpointParamsWithHTTPClient(client *http.Client) *ReplaceMsgVpnTopicEndpointParams {
	return &ReplaceMsgVpnTopicEndpointParams{
		HTTPClient: client,
	}
}

/* ReplaceMsgVpnTopicEndpointParams contains all the parameters to send to the API endpoint
   for the replace msg vpn topic endpoint operation.

   Typically these are written to a http.Request.
*/
type ReplaceMsgVpnTopicEndpointParams struct {

	/* Body.

	   The Topic Endpoint object's attributes.
	*/
	Body *models.MsgVpnTopicEndpoint

	/* MsgVpnName.

	   The name of the Message VPN.
	*/
	MsgVpnName string

	/* OpaquePassword.

	   Accept opaque attributes in the request or return opaque attributes in the response, encrypted with the specified password. See that documentation for the `opaquePassword` parameter.
	*/
	OpaquePassword *string

	/* Select.

	   Include in the response only selected attributes of the object, or exclude from the response selected attributes of the object. See the documentation for the `select` parameter.
	*/
	Select []string

	/* TopicEndpointName.

	   The name of the Topic Endpoint.
	*/
	TopicEndpointName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the replace msg vpn topic endpoint params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReplaceMsgVpnTopicEndpointParams) WithDefaults() *ReplaceMsgVpnTopicEndpointParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the replace msg vpn topic endpoint params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReplaceMsgVpnTopicEndpointParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) WithTimeout(timeout time.Duration) *ReplaceMsgVpnTopicEndpointParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) WithContext(ctx context.Context) *ReplaceMsgVpnTopicEndpointParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) WithHTTPClient(client *http.Client) *ReplaceMsgVpnTopicEndpointParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) WithBody(body *models.MsgVpnTopicEndpoint) *ReplaceMsgVpnTopicEndpointParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) SetBody(body *models.MsgVpnTopicEndpoint) {
	o.Body = body
}

// WithMsgVpnName adds the msgVpnName to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) WithMsgVpnName(msgVpnName string) *ReplaceMsgVpnTopicEndpointParams {
	o.SetMsgVpnName(msgVpnName)
	return o
}

// SetMsgVpnName adds the msgVpnName to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) SetMsgVpnName(msgVpnName string) {
	o.MsgVpnName = msgVpnName
}

// WithOpaquePassword adds the opaquePassword to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) WithOpaquePassword(opaquePassword *string) *ReplaceMsgVpnTopicEndpointParams {
	o.SetOpaquePassword(opaquePassword)
	return o
}

// SetOpaquePassword adds the opaquePassword to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) SetOpaquePassword(opaquePassword *string) {
	o.OpaquePassword = opaquePassword
}

// WithSelect adds the selectVar to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) WithSelect(selectVar []string) *ReplaceMsgVpnTopicEndpointParams {
	o.SetSelect(selectVar)
	return o
}

// SetSelect adds the select to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) SetSelect(selectVar []string) {
	o.Select = selectVar
}

// WithTopicEndpointName adds the topicEndpointName to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) WithTopicEndpointName(topicEndpointName string) *ReplaceMsgVpnTopicEndpointParams {
	o.SetTopicEndpointName(topicEndpointName)
	return o
}

// SetTopicEndpointName adds the topicEndpointName to the replace msg vpn topic endpoint params
func (o *ReplaceMsgVpnTopicEndpointParams) SetTopicEndpointName(topicEndpointName string) {
	o.TopicEndpointName = topicEndpointName
}

// WriteToRequest writes these params to a swagger request
func (o *ReplaceMsgVpnTopicEndpointParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param msgVpnName
	if err := r.SetPathParam("msgVpnName", o.MsgVpnName); err != nil {
		return err
	}

	if o.OpaquePassword != nil {

		// query param opaquePassword
		var qrOpaquePassword string

		if o.OpaquePassword != nil {
			qrOpaquePassword = *o.OpaquePassword
		}
		qOpaquePassword := qrOpaquePassword
		if qOpaquePassword != "" {

			if err := r.SetQueryParam("opaquePassword", qOpaquePassword); err != nil {
				return err
			}
		}
	}

	if o.Select != nil {

		// binding items for select
		joinedSelect := o.bindParamSelect(reg)

		// query array param select
		if err := r.SetQueryParam("select", joinedSelect...); err != nil {
			return err
		}
	}

	// path param topicEndpointName
	if err := r.SetPathParam("topicEndpointName", o.TopicEndpointName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamReplaceMsgVpnTopicEndpoint binds the parameter select
func (o *ReplaceMsgVpnTopicEndpointParams) bindParamSelect(formats strfmt.Registry) []string {
	selectIR := o.Select

	var selectIC []string
	for _, selectIIR := range selectIR { // explode []string

		selectIIV := selectIIR // string as string
		selectIC = append(selectIC, selectIIV)
	}

	// items.CollectionFormat: "csv"
	selectIS := swag.JoinByFormat(selectIC, "csv")

	return selectIS
}
