// Code generated by go-swagger; DO NOT EDIT.

package all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/PatrickDelancy/semp-client/models"
)

// DeleteMsgVpnACLProfileClientConnectExceptionReader is a Reader for the DeleteMsgVpnACLProfileClientConnectException structure.
type DeleteMsgVpnACLProfileClientConnectExceptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteMsgVpnACLProfileClientConnectExceptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteMsgVpnACLProfileClientConnectExceptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewDeleteMsgVpnACLProfileClientConnectExceptionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteMsgVpnACLProfileClientConnectExceptionOK creates a DeleteMsgVpnACLProfileClientConnectExceptionOK with default headers values
func NewDeleteMsgVpnACLProfileClientConnectExceptionOK() *DeleteMsgVpnACLProfileClientConnectExceptionOK {
	return &DeleteMsgVpnACLProfileClientConnectExceptionOK{}
}

/* DeleteMsgVpnACLProfileClientConnectExceptionOK describes a response with status code 200, with default header values.

The request metadata.
*/
type DeleteMsgVpnACLProfileClientConnectExceptionOK struct {
	Payload *models.SempMetaOnlyResponse
}

func (o *DeleteMsgVpnACLProfileClientConnectExceptionOK) Error() string {
	return fmt.Sprintf("[DELETE /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}][%d] deleteMsgVpnAclProfileClientConnectExceptionOK  %+v", 200, o.Payload)
}
func (o *DeleteMsgVpnACLProfileClientConnectExceptionOK) GetPayload() *models.SempMetaOnlyResponse {
	return o.Payload
}

func (o *DeleteMsgVpnACLProfileClientConnectExceptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SempMetaOnlyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteMsgVpnACLProfileClientConnectExceptionDefault creates a DeleteMsgVpnACLProfileClientConnectExceptionDefault with default headers values
func NewDeleteMsgVpnACLProfileClientConnectExceptionDefault(code int) *DeleteMsgVpnACLProfileClientConnectExceptionDefault {
	return &DeleteMsgVpnACLProfileClientConnectExceptionDefault{
		_statusCode: code,
	}
}

/* DeleteMsgVpnACLProfileClientConnectExceptionDefault describes a response with status code -1, with default header values.

The error response.
*/
type DeleteMsgVpnACLProfileClientConnectExceptionDefault struct {
	_statusCode int

	Payload *models.SempMetaOnlyResponse
}

// Code gets the status code for the delete msg vpn Acl profile client connect exception default response
func (o *DeleteMsgVpnACLProfileClientConnectExceptionDefault) Code() int {
	return o._statusCode
}

func (o *DeleteMsgVpnACLProfileClientConnectExceptionDefault) Error() string {
	return fmt.Sprintf("[DELETE /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/clientConnectExceptions/{clientConnectExceptionAddress}][%d] deleteMsgVpnAclProfileClientConnectException default  %+v", o._statusCode, o.Payload)
}
func (o *DeleteMsgVpnACLProfileClientConnectExceptionDefault) GetPayload() *models.SempMetaOnlyResponse {
	return o.Payload
}

func (o *DeleteMsgVpnACLProfileClientConnectExceptionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SempMetaOnlyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
