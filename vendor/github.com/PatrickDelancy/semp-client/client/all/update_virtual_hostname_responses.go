// Code generated by go-swagger; DO NOT EDIT.

package all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/PatrickDelancy/semp-client/models"
)

// UpdateVirtualHostnameReader is a Reader for the UpdateVirtualHostname structure.
type UpdateVirtualHostnameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVirtualHostnameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateVirtualHostnameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateVirtualHostnameDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateVirtualHostnameOK creates a UpdateVirtualHostnameOK with default headers values
func NewUpdateVirtualHostnameOK() *UpdateVirtualHostnameOK {
	return &UpdateVirtualHostnameOK{}
}

/* UpdateVirtualHostnameOK describes a response with status code 200, with default header values.

The Virtual Hostname object's attributes after being updated, and the request metadata.
*/
type UpdateVirtualHostnameOK struct {
	Payload *models.VirtualHostnameResponse
}

func (o *UpdateVirtualHostnameOK) Error() string {
	return fmt.Sprintf("[PATCH /virtualHostnames/{virtualHostname}][%d] updateVirtualHostnameOK  %+v", 200, o.Payload)
}
func (o *UpdateVirtualHostnameOK) GetPayload() *models.VirtualHostnameResponse {
	return o.Payload
}

func (o *UpdateVirtualHostnameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VirtualHostnameResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVirtualHostnameDefault creates a UpdateVirtualHostnameDefault with default headers values
func NewUpdateVirtualHostnameDefault(code int) *UpdateVirtualHostnameDefault {
	return &UpdateVirtualHostnameDefault{
		_statusCode: code,
	}
}

/* UpdateVirtualHostnameDefault describes a response with status code -1, with default header values.

The error response.
*/
type UpdateVirtualHostnameDefault struct {
	_statusCode int

	Payload *models.SempMetaOnlyResponse
}

// Code gets the status code for the update virtual hostname default response
func (o *UpdateVirtualHostnameDefault) Code() int {
	return o._statusCode
}

func (o *UpdateVirtualHostnameDefault) Error() string {
	return fmt.Sprintf("[PATCH /virtualHostnames/{virtualHostname}][%d] updateVirtualHostname default  %+v", o._statusCode, o.Payload)
}
func (o *UpdateVirtualHostnameDefault) GetPayload() *models.SempMetaOnlyResponse {
	return o.Payload
}

func (o *UpdateVirtualHostnameDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SempMetaOnlyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
