// Code generated by go-swagger; DO NOT EDIT.

package all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteMsgVpnAuthorizationGroupParams creates a new DeleteMsgVpnAuthorizationGroupParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteMsgVpnAuthorizationGroupParams() *DeleteMsgVpnAuthorizationGroupParams {
	return &DeleteMsgVpnAuthorizationGroupParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteMsgVpnAuthorizationGroupParamsWithTimeout creates a new DeleteMsgVpnAuthorizationGroupParams object
// with the ability to set a timeout on a request.
func NewDeleteMsgVpnAuthorizationGroupParamsWithTimeout(timeout time.Duration) *DeleteMsgVpnAuthorizationGroupParams {
	return &DeleteMsgVpnAuthorizationGroupParams{
		timeout: timeout,
	}
}

// NewDeleteMsgVpnAuthorizationGroupParamsWithContext creates a new DeleteMsgVpnAuthorizationGroupParams object
// with the ability to set a context for a request.
func NewDeleteMsgVpnAuthorizationGroupParamsWithContext(ctx context.Context) *DeleteMsgVpnAuthorizationGroupParams {
	return &DeleteMsgVpnAuthorizationGroupParams{
		Context: ctx,
	}
}

// NewDeleteMsgVpnAuthorizationGroupParamsWithHTTPClient creates a new DeleteMsgVpnAuthorizationGroupParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteMsgVpnAuthorizationGroupParamsWithHTTPClient(client *http.Client) *DeleteMsgVpnAuthorizationGroupParams {
	return &DeleteMsgVpnAuthorizationGroupParams{
		HTTPClient: client,
	}
}

/* DeleteMsgVpnAuthorizationGroupParams contains all the parameters to send to the API endpoint
   for the delete msg vpn authorization group operation.

   Typically these are written to a http.Request.
*/
type DeleteMsgVpnAuthorizationGroupParams struct {

	/* AuthorizationGroupName.

	   The name of the LDAP Authorization Group. Special care is needed if the group name contains special characters such as '#', '+', ';', '=' as the value of the group name returned from the LDAP server might prepend those characters with '\'. For example a group name called 'test#,lab,com' will be returned from the LDAP server as 'test\#,lab,com'.
	*/
	AuthorizationGroupName string

	/* MsgVpnName.

	   The name of the Message VPN.
	*/
	MsgVpnName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete msg vpn authorization group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteMsgVpnAuthorizationGroupParams) WithDefaults() *DeleteMsgVpnAuthorizationGroupParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete msg vpn authorization group params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteMsgVpnAuthorizationGroupParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) WithTimeout(timeout time.Duration) *DeleteMsgVpnAuthorizationGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) WithContext(ctx context.Context) *DeleteMsgVpnAuthorizationGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) WithHTTPClient(client *http.Client) *DeleteMsgVpnAuthorizationGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorizationGroupName adds the authorizationGroupName to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) WithAuthorizationGroupName(authorizationGroupName string) *DeleteMsgVpnAuthorizationGroupParams {
	o.SetAuthorizationGroupName(authorizationGroupName)
	return o
}

// SetAuthorizationGroupName adds the authorizationGroupName to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) SetAuthorizationGroupName(authorizationGroupName string) {
	o.AuthorizationGroupName = authorizationGroupName
}

// WithMsgVpnName adds the msgVpnName to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) WithMsgVpnName(msgVpnName string) *DeleteMsgVpnAuthorizationGroupParams {
	o.SetMsgVpnName(msgVpnName)
	return o
}

// SetMsgVpnName adds the msgVpnName to the delete msg vpn authorization group params
func (o *DeleteMsgVpnAuthorizationGroupParams) SetMsgVpnName(msgVpnName string) {
	o.MsgVpnName = msgVpnName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteMsgVpnAuthorizationGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param authorizationGroupName
	if err := r.SetPathParam("authorizationGroupName", o.AuthorizationGroupName); err != nil {
		return err
	}

	// path param msgVpnName
	if err := r.SetPathParam("msgVpnName", o.MsgVpnName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
