// Code generated by go-swagger; DO NOT EDIT.

package all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/PatrickDelancy/semp-client/models"
)

// GetMsgVpnACLProfilePublishTopicExceptionsReader is a Reader for the GetMsgVpnACLProfilePublishTopicExceptions structure.
type GetMsgVpnACLProfilePublishTopicExceptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMsgVpnACLProfilePublishTopicExceptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMsgVpnACLProfilePublishTopicExceptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetMsgVpnACLProfilePublishTopicExceptionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetMsgVpnACLProfilePublishTopicExceptionsOK creates a GetMsgVpnACLProfilePublishTopicExceptionsOK with default headers values
func NewGetMsgVpnACLProfilePublishTopicExceptionsOK() *GetMsgVpnACLProfilePublishTopicExceptionsOK {
	return &GetMsgVpnACLProfilePublishTopicExceptionsOK{}
}

/* GetMsgVpnACLProfilePublishTopicExceptionsOK describes a response with status code 200, with default header values.

The list of Publish Topic Exception objects' attributes, and the request metadata.
*/
type GetMsgVpnACLProfilePublishTopicExceptionsOK struct {
	Payload *models.MsgVpnACLProfilePublishTopicExceptionsResponse
}

func (o *GetMsgVpnACLProfilePublishTopicExceptionsOK) Error() string {
	return fmt.Sprintf("[GET /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions][%d] getMsgVpnAclProfilePublishTopicExceptionsOK  %+v", 200, o.Payload)
}
func (o *GetMsgVpnACLProfilePublishTopicExceptionsOK) GetPayload() *models.MsgVpnACLProfilePublishTopicExceptionsResponse {
	return o.Payload
}

func (o *GetMsgVpnACLProfilePublishTopicExceptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MsgVpnACLProfilePublishTopicExceptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMsgVpnACLProfilePublishTopicExceptionsDefault creates a GetMsgVpnACLProfilePublishTopicExceptionsDefault with default headers values
func NewGetMsgVpnACLProfilePublishTopicExceptionsDefault(code int) *GetMsgVpnACLProfilePublishTopicExceptionsDefault {
	return &GetMsgVpnACLProfilePublishTopicExceptionsDefault{
		_statusCode: code,
	}
}

/* GetMsgVpnACLProfilePublishTopicExceptionsDefault describes a response with status code -1, with default header values.

The error response.
*/
type GetMsgVpnACLProfilePublishTopicExceptionsDefault struct {
	_statusCode int

	Payload *models.SempMetaOnlyResponse
}

// Code gets the status code for the get msg vpn Acl profile publish topic exceptions default response
func (o *GetMsgVpnACLProfilePublishTopicExceptionsDefault) Code() int {
	return o._statusCode
}

func (o *GetMsgVpnACLProfilePublishTopicExceptionsDefault) Error() string {
	return fmt.Sprintf("[GET /msgVpns/{msgVpnName}/aclProfiles/{aclProfileName}/publishTopicExceptions][%d] getMsgVpnAclProfilePublishTopicExceptions default  %+v", o._statusCode, o.Payload)
}
func (o *GetMsgVpnACLProfilePublishTopicExceptionsDefault) GetPayload() *models.SempMetaOnlyResponse {
	return o.Payload
}

func (o *GetMsgVpnACLProfilePublishTopicExceptionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SempMetaOnlyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
